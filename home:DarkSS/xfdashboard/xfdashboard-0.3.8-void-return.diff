diff --git a/xfdashboard/bindings-pool.c b/xfdashboard/bindings-pool.c
index 6fc506e..a1352fa 100644
--- a/xfdashboard/bindings-pool.c
+++ b/xfdashboard/bindings-pool.c
@@ -473,7 +473,7 @@ static void _xfdashboard_bindings_pool_parse_bindings_start(GMarkupParseContext
 		gchar									*when=NULL;
 		gchar									*target=NULL;
 		gchar									*allowUnfocusableTargets=NULL;
-		ClutterEventType						eventType=CLUTTER_EVENT_NONE;
+		ClutterEventType						eventType=CLUTTER_NOTHING;
 		guint									key=0;
 		ClutterModifierType						modifiers=0;
 		XfdashboardBindingFlags					flags=0;
diff --git a/xfdashboard/view.c b/xfdashboard/view.c
index 9f81062..3197498 100644
--- a/xfdashboard/view.c
+++ b/xfdashboard/view.c
@@ -331,7 +331,7 @@ static void xfdashboard_view_class_init(XfdashboardViewClass *klass)
 							G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 
 	XfdashboardViewProperties[PROP_FIT_MODE]=
-		g_param_spec_string("fit-mode",
+		g_param_spec_enum("fit-mode",
 							_("Fit mode"),
 							_("Defines if view should be fit into viewpad and its orientation"),
 							XFDASHBOARD_FIT_MODE_NONE,
diff --git a/xfdashboard/viewpad.c b/xfdashboard/viewpad.c
index bb00e97..23b20cd 100644
--- a/xfdashboard/viewpad.c
+++ b/xfdashboard/viewpad.c
@@ -495,7 +495,7 @@ static void _xfdashboard_viewpad_on_view_scroll_to(XfdashboardViewpad *self,
 		}
 }
 
-/* Get amount to scroll in requested direction if scrolling is possible */
+/* Determine if scrolling is needed to get requested actor visible in viewpad */
 static gboolean _xfdashboard_viewpad_on_view_child_needs_scroll(XfdashboardViewpad *self,
 																ClutterActor *inActor,
 																gpointer inUserData)
@@ -508,9 +508,9 @@ static gboolean _xfdashboard_viewpad_on_view_child_needs_scroll(XfdashboardViewp
 	gfloat						x, y, w, h;
 	gboolean					needScrolling;
 
-	g_return_if_fail(XFDASHBOARD_IS_VIEWPAD(self));
-	g_return_if_fail(CLUTTER_IS_ACTOR(inActor));
-	g_return_if_fail(XFDASHBOARD_IS_VIEW(inUserData));
+	g_return_val_if_fail(XFDASHBOARD_IS_VIEWPAD(self), FALSE);
+	g_return_val_if_fail(CLUTTER_IS_ACTOR(inActor), FALSE);
+	g_return_val_if_fail(XFDASHBOARD_IS_VIEW(inUserData), FALSE);
 
 	priv=self->priv;
 	view=XFDASHBOARD_VIEW(inUserData);
diff --git a/xfdashboard/view.c b/xfdashboard/view.c
index 3197498..eb80780 100644
--- a/xfdashboard/view.c
+++ b/xfdashboard/view.c
@@ -35,6 +35,7 @@
 #include "utils.h"
 #include "focus-manager.h"
 #include "viewpad.h"
+#include "enums.h"
 
 /* Define this class in GObject system */
 G_DEFINE_ABSTRACT_TYPE(XfdashboardView,
@@ -334,6 +335,7 @@ static void xfdashboard_view_class_init(XfdashboardViewClass *klass)
 		g_param_spec_enum("fit-mode",
 							_("Fit mode"),
 							_("Defines if view should be fit into viewpad and its orientation"),
+							XFDASHBOARD_TYPE_FIT_MODE,
 							XFDASHBOARD_FIT_MODE_NONE,
 							G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 
