diff -crB modem-manager-gui-0.0.16/src/main.c modem-manager-gui-0.0.16.new/src/main.c
*** modem-manager-gui-0.0.16/src/main.c	2013-07-28 00:31:30.000000000 +0400
--- modem-manager-gui-0.0.16.new/src/main.c	2013-07-28 19:34:53.000000000 +0400
***************
*** 565,570 ****
--- 565,571 ----
  #ifdef __GLIBC__
  static void mmgui_main_application_backtrace_signal_handler(int sig, siginfo_t *info, ucontext_t *ucontext);
  #endif
+ static void mmgui_main_application_termination_signal_handler(int sig, siginfo_t *info, ucontext_t *ucontext);
  
  //EVENTS
  static void mmgui_main_event_callback(enum _mmgui_event event, gpointer mmguicore, gpointer data, gpointer userdata)
***************
*** 1406,1412 ****
  	if (mmguiapp->options->savegeometry) {
  		//Get window geometry and coordinates
  		gtk_window_get_size(GTK_WINDOW(mmguiapp->window->window), &(mmguiapp->options->wgwidth), &(mmguiapp->options->wgheight));
! 		gtk_window_get_position(GTK_WINDOW(mmguiapp->window->window), &(mmguiapp->options->wgposx), &(mmguiapp->options->wgposy));
  		//Save it
  		if ((mmguiapp->options->wgwidth >= 1) && (mmguiapp->options->wgheight >= 1)) {
  			//Window geometry
--- 1407,1416 ----
  	if (mmguiapp->options->savegeometry) {
  		//Get window geometry and coordinates
  		gtk_window_get_size(GTK_WINDOW(mmguiapp->window->window), &(mmguiapp->options->wgwidth), &(mmguiapp->options->wgheight));
! 		/*Get new coordinates only if window visible or use saved coordinates otherwise*/
! 		if (gtk_widget_get_visible(mmguiapp->window->window)) {
! 			gtk_window_get_position(GTK_WINDOW(mmguiapp->window->window), &(mmguiapp->options->wgposx), &(mmguiapp->options->wgposy));
! 		}
  		//Save it
  		if ((mmguiapp->options->wgwidth >= 1) && (mmguiapp->options->wgheight >= 1)) {
  			//Window geometry
***************
*** 1650,1655 ****
--- 1654,1663 ----
  	if ((mmguiapp->core == NULL) || (mmguiapp->window == NULL)) return;
  	
  	if (gtk_widget_get_visible(mmguiapp->window->window)) {
+ 		/*Save window position*/
+ 		if (mmguiapp->options->savegeometry) {
+ 			gtk_window_get_position(GTK_WINDOW(mmguiapp->window->window), &(mmguiapp->options->wgposx), &(mmguiapp->options->wgposy));
+ 		}
  		/*Hide window*/
  		gtk_widget_hide(mmguiapp->window->window);
  		mmguiapp->options->minimized = TRUE;
***************
*** 1657,1662 ****
--- 1665,1674 ----
  		gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(mmguiapp->window->showwin_tm), FALSE);
  		g_signal_handler_unblock(G_OBJECT(mmguiapp->window->showwin_tm), mmguiapp->window->traysigid);
  	} else {
+ 		/*Restore window position*/
+ 		if (mmguiapp->options->savegeometry) {
+ 			gtk_window_move(GTK_WINDOW(mmguiapp->window->window), mmguiapp->options->wgposx, mmguiapp->options->wgposy);
+ 		}
  		/*Show window*/
  		gtk_widget_show(mmguiapp->window->window);
  		mmguiapp->options->minimized = FALSE;
***************
*** 5854,5862 ****
--- 5866,5892 ----
  }
  #endif
  
+ static void mmgui_main_application_termination_signal_handler(int sig, siginfo_t *info, ucontext_t *ucontext)
+ {
+ 	GApplication *application;
+ 	GAction *quitaction;
+ 		
+ 	application = g_application_get_default();
+ 	
+ 	if (application != NULL) {
+ 		/*Quit action*/
+ 		quitaction = g_action_map_lookup_action(G_ACTION_MAP(application), "quit");
+ 		if (quitaction != NULL) {
+ 			/*Activate action used for appmenu*/
+ 			g_action_activate(quitaction, NULL);
+ 		}
+ 	}
+ }
+ 
  int main(int argc, char *argv[])
  {
  	mmgui_application_t mmguiapp;
+ 	struct sigaction termsa;
  	GOptionContext *optcontext;
  	gboolean listmodules;
  	GError *error;
***************
*** 5892,5906 ****
  	
  	//Backtrace handler
  	#ifdef __GLIBC__
! 		struct sigaction sa;
! 		
! 		sa.sa_sigaction = (void *)mmgui_main_application_backtrace_signal_handler;
! 		sigemptyset(&sa.sa_mask);
! 		sa.sa_flags = SA_RESTART | SA_SIGINFO;
  		
! 		sigaction(SIGSEGV, &sa, NULL);
  	#endif
  	
  	setlocale(LC_ALL, "");
  	bindtextdomain(RESOURCE_LOCALE_DOMAIN, RESOURCE_LOCALE_DIR);
  	bind_textdomain_codeset(RESOURCE_LOCALE_DOMAIN, "UTF-8");
--- 5922,5945 ----
  	
  	//Backtrace handler
  	#ifdef __GLIBC__
! 		struct sigaction btsa;
  		
! 		btsa.sa_sigaction = (void *)mmgui_main_application_backtrace_signal_handler;
! 		sigemptyset(&btsa.sa_mask);
! 		btsa.sa_flags = SA_RESTART | SA_SIGINFO;
! 		/*Segmentation fault signal*/
! 		sigaction(SIGSEGV, &btsa, NULL);
  	#endif
  	
+ 	/*Termination handler*/
+ 	termsa.sa_sigaction = (void *)mmgui_main_application_termination_signal_handler;
+ 	sigemptyset(&termsa.sa_mask);
+ 	termsa.sa_flags = SA_RESTART | SA_SIGINFO;
+ 	/*Termination, interrruption and hungup signals*/
+ 	sigaction(SIGTERM, &termsa, NULL);
+ 	sigaction(SIGINT, &termsa, NULL);
+ 	sigaction(SIGHUP, &termsa, NULL);
+ 	
  	setlocale(LC_ALL, "");
  	bindtextdomain(RESOURCE_LOCALE_DOMAIN, RESOURCE_LOCALE_DIR);
  	bind_textdomain_codeset(RESOURCE_LOCALE_DOMAIN, "UTF-8");
