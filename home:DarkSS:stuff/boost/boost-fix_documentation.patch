Index: boost/accumulators/framework/accumulator_set.hpp
===================================================================
--- boost/accumulators/framework/accumulator_set.hpp.orig	2012-03-13 17:20:43.831945305 +0100
+++ boost/accumulators/framework/accumulator_set.hpp	2012-03-13 17:22:18.819680809 +0100
@@ -234,7 +234,6 @@ struct accumulator_set
 
     ///////////////////////////////////////////////////////////////////////////////
     /// Accumulation
-    /// \param a1 Optional named parameter to be passed to all the accumulators
     void operator ()()
     {
         this->visit(
@@ -244,6 +243,7 @@ struct accumulator_set
         );
     }
 
+    /// \param a1 Optional named parameter to be passed to all the accumulators
     template<typename A1>
     void operator ()(A1 const &a1)
     {
Index: boost/accumulators/framework/extractor.hpp
===================================================================
--- boost/accumulators/framework/extractor.hpp.orig	2012-03-13 17:20:43.831945305 +0100
+++ boost/accumulators/framework/extractor.hpp	2012-03-13 17:22:18.819680809 +0100
@@ -94,7 +94,6 @@ struct extractor
     };
 
     /// Extract the result associated with Feature from the accumulator set
-    /// \param acc The accumulator set object from which to extract the result
     template<typename Arg1>
     typename detail::extractor_result<Arg1, Feature>::type
     operator ()(Arg1 const &arg1) const
@@ -106,6 +105,7 @@ struct extractor
 
     /// \overload
     ///
+    /// \param acc The accumulator set object from which to extract the result
     /// \param a1 Optional named parameter to be passed to the accumulator's result() function.
     template<typename AccumulatorSet, typename A1>
     typename detail::extractor_result<AccumulatorSet, Feature>::type
Index: boost/algorithm/string/finder.hpp
===================================================================
--- boost/algorithm/string/finder.hpp.orig	2012-03-13 17:20:43.831945305 +0100
+++ boost/algorithm/string/finder.hpp	2012-03-13 17:22:18.819680809 +0100
@@ -43,7 +43,6 @@ namespace boost {
             The result is given as an \c iterator_range delimiting the match.
 
             \param Search A substring to be searched for.
-            \param Comp An element comparison predicate
             \return An instance of the \c first_finder object
         */
         template<typename RangeT>
@@ -62,6 +61,7 @@ namespace boost {
         //! "First" finder
         /*!
             \overload
+            \param Comp An element comparison predicate
         */
         template<typename RangeT,typename PredicateT>
         inline detail::first_finderF<
@@ -84,7 +84,6 @@ namespace boost {
             The result is given as an \c iterator_range delimiting the match.
 
             \param Search A substring to be searched for.
-            \param Comp An element comparison predicate
             \return An instance of the \c last_finder object
         */
         template<typename RangeT>
@@ -102,6 +101,7 @@ namespace boost {
         //! "Last" finder
         /*!
             \overload
+            \param Comp An element comparison predicate
         */
         template<typename RangeT, typename PredicateT>
         inline detail::last_finderF<
@@ -124,7 +124,6 @@ namespace boost {
 
             \param Search A substring to be searched for.
             \param Nth An index of the match to be find
-            \param Comp An element comparison predicate
             \return An instance of the \c nth_finder object
         */
         template<typename RangeT>
@@ -144,6 +143,7 @@ namespace boost {
         //! "Nth" finder
         /*!
             \overload
+            \param Comp An element comparison predicate
         */
         template<typename RangeT, typename PredicateT>
         inline detail::nth_finderF<
@@ -230,7 +230,6 @@ namespace boost {
 
             \param Begin Beginning of the range
             \param End End of the range
-            \param Range The range.
             \return An instance of the \c range_finger object
         */
         template< typename ForwardIteratorT >
@@ -245,6 +244,7 @@ namespace boost {
         //! "Range" finder
         /*!       
             \overload
+            \param Range The range.
         */
         template< typename ForwardIteratorT >
         inline detail::range_finderF<ForwardIteratorT>
Index: boost/algorithm/string/formatter.hpp
===================================================================
--- boost/algorithm/string/formatter.hpp.orig	2012-03-13 17:20:43.831945305 +0100
+++ boost/algorithm/string/formatter.hpp	2012-03-13 17:22:18.819680809 +0100
@@ -76,8 +76,6 @@ namespace boost {
             Constructs an \c empty_formatter. Empty formatter always returns an empty
             sequence. 
 
-            \param Input container used to select a correct value_type for the
-                         resulting empty_container<>.
             \return An instance of the \c empty_formatter object.
         */
         template<typename RangeT>
Index: boost/date_time/dst_rules.hpp
===================================================================
--- boost/date_time/dst_rules.hpp.orig	2012-03-13 17:20:43.831945305 +0100
+++ boost/date_time/dst_rules.hpp	2012-03-13 17:22:18.820680785 +0100
@@ -94,7 +94,7 @@ namespace boost {
        *  @param dst_start_offset Time offset within day for dst boundary
        *  @param dst_end_day    Ending day of dst for the given locality
        *  @param dst_end_offset Time offset within day given in dst for dst boundary
-       *  @param dst_length lenght of dst adjusment
+       *  @param dst_length_minutes length of dst adjustment
        *  @retval The time is either ambiguous, invalid, in dst, or not in dst
        */
       static time_is_dst_result 
Index: boost/date_time/strings_from_facet.hpp
===================================================================
--- boost/date_time/strings_from_facet.hpp.orig	2012-03-13 17:20:43.831945305 +0100
+++ boost/date_time/strings_from_facet.hpp	2012-03-13 17:22:18.820680785 +0100
@@ -21,8 +21,9 @@ namespace boost { namespace date_time {
  *  all the month strings from a locale.  This is handy when building
  *  custom date parsers or formatters that need to be localized.
  *
- *@param charT The type of char to use when gathering typically char
- *             or wchar_t.
+ *! charT The type of char to use when gathering, typically char
+ *        or wchar_t.
+ *
  *@param locale The locale to use when gathering the strings
  *@param short_strings True(default) to gather short strings,
  *                     false for long strings.
@@ -71,8 +72,9 @@ gather_month_strings(const std::locale&
  *  'Sunday'.  This is handy when building custom date parsers or
  *  formatters that need to be localized.
  *
- *@param charT The type of char to use when gathering typically char
- *             or wchar_t.
+ *! charT The type of char to use when gathering, typically char
+ *        or wchar_t.
+ *
  *@param locale The locale to use when gathering the strings
  *@param short_strings True(default) to gather short strings,
  *                     false for long strings.
Index: boost/date_time/time_zone_names.hpp
===================================================================
--- boost/date_time/time_zone_names.hpp.orig	2012-03-13 17:20:43.832945281 +0100
+++ boost/date_time/time_zone_names.hpp	2012-03-13 17:22:18.820680785 +0100
@@ -43,7 +43,7 @@ namespace date_time {
    *  name: Pacific Standard Time and the abbreviated name: PST.
    *  During daylight savings there are additional names:
    *  Pacific Daylight Time and PDT. 
-   *@parm CharT Allows class to support different character types
+   *@param CharT Allows the class to support different character types
    */
   template<class CharT>
   class time_zone_names_base
Index: boost/intrusive/linear_slist_algorithms.hpp
===================================================================
--- boost/intrusive/linear_slist_algorithms.hpp.orig	2012-03-13 17:20:43.832945281 +0100
+++ boost/intrusive/linear_slist_algorithms.hpp	2012-03-13 17:22:18.820680785 +0100
@@ -60,9 +60,9 @@ class linear_slist_algorithms
 
    #if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)
 
-   //! <b>Effects</b>: Constructs an non-used list element, putting the next
+   //! <b>Effects</b>: Constructs n non-used list element, putting the next
    //!   pointer to null:
-   //!  <tt>NodeTraits::get_next(this_node) == node_ptr()</tt>
+   //!  <tt>NodeTraits::get_next(this_node) == 0</tt>
    //! 
    //! <b>Complexity</b>: Constant 
    //! 
Index: boost/mpi/collectives.hpp
===================================================================
--- boost/mpi/collectives.hpp.orig	2012-03-13 17:20:43.832945281 +0100
+++ boost/mpi/collectives.hpp	2012-03-13 17:22:18.820680785 +0100
@@ -219,10 +219,6 @@ all_to_all(const communicator& comm, con
  *   non-roots will reshape the objects held in their proxies based on
  *   the skeleton sent from the root.
  *
- *   @param n When supplied, the number of values that the pointer @p
- *   values points to, for broadcasting an array of values. The value
- *   of @p n must be the same for all processes in @p comm.
- *
  *   @param root The rank/process ID of the process that will be
  *   transmitting the value.
  */
@@ -231,6 +227,10 @@ void broadcast(const communicator& comm,
 
 /**
  * \overload
+ *   @param n When supplied, the number of values that the pointer @p
+ *   values points to, for broadcasting an array of values. The value
+ *   of @p n must be the same for all processes in @p comm.
+ *
  */
 template<typename T>
 void broadcast(const communicator& comm, T* values, int n, int root);
Index: boost/mpi/operations.hpp
===================================================================
--- boost/mpi/operations.hpp.orig	2012-03-13 17:20:43.832945281 +0100
+++ boost/mpi/operations.hpp	2012-03-13 17:22:18.820680785 +0100
@@ -13,7 +13,7 @@
  *  This header provides a mapping from function objects to @c MPI_Op
  *  constants used in MPI collective operations. It also provides
  *  several new function object types not present in the standard @c
- *  <functional> header that have direct mappings to @c MPI_Op.
+ *  &lt;functional&gt; header that have direct mappings to @c MPI_Op.
  */
 #ifndef BOOST_MPI_IS_MPI_OP_HPP
 #define BOOST_MPI_IS_MPI_OP_HPP
Index: boost/program_options/value_semantic.hpp
===================================================================
--- boost/program_options/value_semantic.hpp.orig	2012-03-13 17:20:43.832945281 +0100
+++ boost/program_options/value_semantic.hpp	2012-03-13 17:22:18.820680785 +0100
@@ -385,7 +385,7 @@ namespace boost { namespace program_opti
     typed_value<T, wchar_t>*
     wvalue(T* v);
 
-    /** Works the same way as the 'value<bool>' function, but the created
+    /** Works the same way as the 'value&lt;bool&gt;' function, but the created
         value_semantic won't accept any explicit value. So, if the option 
         is present on the command line, the value will be 'true'.
     */
Index: libs/mpi/doc/mpi.qbk
===================================================================
--- libs/mpi/doc/mpi.qbk.orig	2012-03-13 17:20:43.832945281 +0100
+++ libs/mpi/doc/mpi.qbk	2012-03-13 17:22:18.821680761 +0100
@@ -1846,7 +1846,7 @@ routine, e.g.,
 
 `skeleton_proxy` objects can be received on the other end via `recv()`,
 which stores a newly-created instance of your data structure with the
-same "shape" as the sender in its `"object` attribute:
+same "shape" as the sender in its `object` attribute:
 
   shape = mpi.world.recv(0, 0)
   my_data_structure = shape.object
