Index: src/timeslider.cpp
===================================================================
--- src/timeslider.cpp	(revision 6207)
+++ src/timeslider.cpp	(revision 6209)
@@ -138,10 +138,20 @@
 	return position;
 }
 
-/*
-void TimeSlider::wheelEvent( QWheelEvent * e ) {
-	e->ignore();
+void TimeSlider::wheelEvent(QWheelEvent * e) {
+	//e->ignore();
+
+	qDebug("TimeSlider::wheelEvent: delta: %d", e->delta());
+	e->accept();
+
+	if (e->orientation() == Qt::Vertical) {
+	    if (e->delta() >= 0)
+	        emit wheelUp();
+	    else
+	        emit wheelDown();
+	} else {
+		qDebug("Timeslider::wheelEvent: horizontal event received, doing nothing");
+	}
 }
-*/
 
 #include "moc_timeslider.cpp"
Index: src/skingui/panelseeker.cpp
===================================================================
--- src/skingui/panelseeker.cpp	(revision 6207)
+++ src/skingui/panelseeker.cpp	(revision 6209)
@@ -353,4 +353,18 @@
 
 }
 
+void PanelTimeSeeker::wheelEvent(QWheelEvent *e) {
+	qDebug("PanelTimeSeeker::wheelEvent: delta: %d", e->delta());
+	e->accept();
+
+	if (e->orientation() == Qt::Vertical) {
+		if (e->delta() >= 0)
+			emit wheelUp();
+		else
+			emit wheelDown();
+	} else {
+		qDebug("PanelTimeSeeker::wheelEvent: horizontal event received, doing nothing");
+	}
+}
+
 #include "moc_panelseeker.cpp"
Index: src/skingui/panelseeker.h
===================================================================
--- src/skingui/panelseeker.h	(revision 6207)
+++ src/skingui/panelseeker.h	(revision 6209)
@@ -128,4 +128,16 @@
 };
 Q_DECLARE_OPERATORS_FOR_FLAGS(PanelSeeker::States)
 
+
+class PanelTimeSeeker : public PanelSeeker {
+	Q_OBJECT
+
+signals:
+	void wheelUp();
+	void wheelDown();
+
+protected:
+    void wheelEvent(QWheelEvent *e);
+};
+
 #endif // PANELSEEKER_H
Index: src/skingui/mediapanel.h
===================================================================
--- src/skingui/mediapanel.h	(revision 6207)
+++ src/skingui/mediapanel.h	(revision 6209)
@@ -103,7 +103,7 @@
     QPixmap rightBackground;
     ScrollingLabel* mediaLabel;
     QLabel *resolutionLabel;
-    PanelSeeker* seeker;
+    PanelTimeSeeker* seeker;
     MyButton* repeatButton;
     MyButton* shuffleButton;
     QLabel* elapsedLabel;
@@ -123,6 +123,8 @@
 
 signals:
 	void seekerChanged(int);
+	void seekerWheelUp();
+	void seekerWheelDown();
 
 public:
     friend class IconSetter;
Index: src/skingui/mediabarpanel.cpp
===================================================================
--- src/skingui/mediabarpanel.cpp	(revision 6207)
+++ src/skingui/mediabarpanel.cpp	(revision 6209)
@@ -101,6 +101,8 @@
     connect(core, SIGNAL(showTime(double)), this, SLOT(gotCurrentTime(double)));
     connect(core, SIGNAL(mediaInfoChanged()), this, SLOT(updateMediaInfo()));
     connect(core, SIGNAL(buffering()), this, SLOT(setBuffering()));
+	connect(mediaPanel, SIGNAL(seekerWheelUp()), core, SLOT(wheelUp()));
+	connect(mediaPanel, SIGNAL(seekerWheelDown()), core, SLOT(wheelDown()));
 }
 
 void MediaBarPanel::setDuration()
Index: src/timeslider.h
===================================================================
--- src/timeslider.h	(revision 6207)
+++ src/timeslider.h	(revision 6209)
@@ -45,6 +45,8 @@
 	//! Emitted with a few ms of delay
 	void delayedDraggingPos(int);
 #endif
+	void wheelUp();
+	void wheelDown();
 
 protected slots:
 	void stopUpdate();
@@ -56,7 +58,7 @@
 	void sendDelayedPos();
 #endif
 
-	/* virtual void wheelEvent( QWheelEvent * e ); */
+	virtual void wheelEvent(QWheelEvent * e);
 
 private:
 	bool dont_update;
Index: src/widgetactions.h
===================================================================
--- src/widgetactions.h	(revision 6207)
+++ src/widgetactions.h	(revision 6209)
@@ -78,6 +78,8 @@
 #if ENABLE_DELAYED_DRAGGING
 	void delayedDraggingPos(int);
 #endif
+	void wheelUp();
+	void wheelDown();
 
 protected:
 	virtual QWidget * createWidget ( QWidget * parent );
Index: src/widgetactions.cpp
===================================================================
--- src/widgetactions.cpp	(revision 6207)
+++ src/widgetactions.cpp	(revision 6209)
@@ -117,6 +117,9 @@
 	         this, SIGNAL(delayedDraggingPos(int)) );
 #endif
 
+	connect(t, SIGNAL(wheelUp()), this, SIGNAL(wheelUp()));
+	connect(t, SIGNAL(wheelDown()), this, SIGNAL(wheelDown()));
+
 	return t;
 }
 
Index: src/baseguiplus.cpp
===================================================================
--- src/baseguiplus.cpp	(revision 6207)
+++ src/baseguiplus.cpp	(revision 6209)
@@ -606,6 +606,10 @@
 	connect( timeslider_action, SIGNAL( draggingPos(int) ), 
              this, SLOT(goToPosOnDragging(int)) );
 #endif
+
+	connect(timeslider_action, SIGNAL(wheelUp()), core, SLOT(wheelUp()));
+	connect(timeslider_action, SIGNAL(wheelDown()), core, SLOT(wheelDown()));
+
 	return timeslider_action;
 }
 
Index: src/skingui/mediapanel.cpp
===================================================================
--- src/skingui/mediapanel.cpp	(revision 6207)
+++ src/skingui/mediapanel.cpp	(revision 6209)
@@ -54,7 +54,7 @@
 	resolutionLabel->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Preferred);
 	repeatButton = new MyButton(this);
 	shuffleButton = new MyButton(this);
-	seeker = new PanelSeeker;
+	seeker = new PanelTimeSeeker;
 	seeker->setObjectName("panel-seeker");
 	seeker->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Ignored);
 #ifdef SEEKBAR_RESOLUTION
@@ -96,7 +96,9 @@
 	timer->setSingleShot(true);
 	timer->setInterval(2000);
 	connect(timer, SIGNAL(timeout()), this, SLOT(reverseStatus()));
-	connect(seeker, SIGNAL(valueChanged(int)), this, SIGNAL(seekerChanged(int)));
+	/* connect(seeker, SIGNAL(valueChanged(int)), this, SIGNAL(seekerChanged(int))); */
+	connect(seeker, SIGNAL(wheelUp()), this, SIGNAL(seekerWheelUp()));
+	connect(seeker, SIGNAL(wheelDown()), this, SIGNAL(seekerWheelDown()));
 }
 
 MediaPanel::~MediaPanel() {
Index: src/skingui/mediapanel.cpp
===================================================================
--- src/skingui/mediapanel.cpp	(revision 6211)
+++ src/skingui/mediapanel.cpp	(revision 6212)
@@ -96,7 +96,7 @@
 	timer->setSingleShot(true);
 	timer->setInterval(2000);
 	connect(timer, SIGNAL(timeout()), this, SLOT(reverseStatus()));
-	/* connect(seeker, SIGNAL(valueChanged(int)), this, SIGNAL(seekerChanged(int))); */
+	connect(seeker, SIGNAL(valueChanged(int)), this, SIGNAL(seekerChanged(int)));
 	connect(seeker, SIGNAL(wheelUp()), this, SIGNAL(seekerWheelUp()));
 	connect(seeker, SIGNAL(wheelDown()), this, SIGNAL(seekerWheelDown()));
 }
