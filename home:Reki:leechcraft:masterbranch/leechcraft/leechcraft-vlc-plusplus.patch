diff --git a/src/plugins/vtyulc/CMakeLists.txt b/src/plugins/vtyulc/CMakeLists.txt
index ac630cc..a9352c1 100644
--- a/src/plugins/vtyulc/CMakeLists.txt
+++ b/src/plugins/vtyulc/CMakeLists.txt
@@ -24,6 +24,7 @@ set (SRCS
 	playlistmodel.cpp
 	xmlsettingsmanager.cpp
 	playlisttitlewidget.cpp
+	volumenotification.cpp
 	)
 	
 CreateTrs("vtyulc" "en;ru_RU" COMPILED_TRANSLATIONS)
diff --git a/src/plugins/vtyulc/playlistmodel.cpp b/src/plugins/vtyulc/playlistmodel.cpp
index dc737b6..d765883 100644
--- a/src/plugins/vtyulc/playlistmodel.cpp
+++ b/src/plugins/vtyulc/playlistmodel.cpp
@@ -48,6 +48,7 @@ namespace vlc
 	, Parent_ (parent)
 	, Playlist_ (playlist)
 	, Instance_ (instance)
+	, FontMetrics_ (QFontMetrics (QFont ()))
 	{
 		setColumnCount (2);
 		setHorizontalHeaderLabels ({ tr ("Name"), tr ("Duration") });
@@ -62,39 +63,33 @@ namespace vlc
 	void PlaylistModel::updateTable ()
 	{
 		setRowCount (libvlc_media_list_count (Playlist_));
-		if (libvlc_media_list_count (Playlist_) != Items_ [0].size ())
+		if (libvlc_media_list_count (Playlist_) != Items_.size ())
 		{
-			int cnt = Items_ [ColumnName].size ();
-			Items_ [ColumnName].resize (libvlc_media_list_count (Playlist_));
-			Items_ [ColumnDuration].resize (libvlc_media_list_count (Playlist_));
+			int cnt = Items_.size ();
+			Items_.resize (libvlc_media_list_count (Playlist_));
 			
-			for (int i = cnt; i < Items_ [0].size (); i++)
+			for (int i = cnt; i < Items_.size (); i++)
 			{
-				Items_ [ColumnName] [i] = new QStandardItem;
-				Items_ [ColumnName] [i]->setFlags (Qt::ItemIsDragEnabled | Qt::ItemIsDropEnabled | Qt::ItemIsEnabled | Qt::ItemIsSelectable);
-				Items_ [ColumnDuration] [i] = new QStandardItem;
-				Items_ [ColumnDuration] [i]->setFlags (Qt::ItemIsDropEnabled | Qt::ItemIsEnabled);
+				Items_ [i] = new QStandardItem;
+				Items_ [i]->setFlags (Qt::ItemIsDragEnabled | Qt::ItemIsDropEnabled | Qt::ItemIsEnabled | Qt::ItemIsSelectable);
 			}
 		}
 		
 		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
 		{
 			libvlc_media_t *media = libvlc_media_list_item_at_index (Playlist_, i);
-			Items_ [ColumnName] [i]->setText (QString::fromUtf8 (libvlc_media_get_meta (media, libvlc_meta_Title)));
-			
-			if (!libvlc_media_is_parsed (media))
-				libvlc_media_parse (media);
 				
 			QTime time (0, 0);
 			time = time.addMSecs (libvlc_media_get_duration (media));
-			Items_ [ColumnDuration] [i]->setText (time.toString ("hh:mm:ss"));
+			
+			if (libvlc_media_is_parsed (media))
+				Items_ [i]->setText (ShrinkText (time.toString ("hh:mm:ss"), QString::fromUtf8 (libvlc_media_get_meta (media, libvlc_meta_Title))));
+			else
+				Items_ [i]->setText ("parsing...");
 		}
 		
 		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
-		{
-			setItem (i, ColumnName, Items_ [ColumnName] [i]);
-			setItem (i, ColumnDuration, Items_ [ColumnDuration] [i]);
-		}
+			setItem (i, 0, Items_ [i]);
 	}
 	
 	bool PlaylistModel::dropMimeData (const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex& parent)
@@ -103,13 +98,10 @@ namespace vlc
 		if (urls.size () == 0)
 			return false;
 		
-		if (parent != invisibleRootItem ()->index ())
-			row = parent.row () - 1;
-		else	
-			row -= 2;
+		row += parent.row ();
 		
 		QUrl insertAfter;
-		for (int i = row; i > 0; i--)
+		for (int i = row; i >= 0; i--)
 		{
 			QUrl url = QUrl::fromEncoded(libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL));
 			if (!urls.contains (url))
@@ -129,7 +121,13 @@ namespace vlc
 			{
 				mediaList << libvlc_media_new_location (Instance_, urls [i].toEncoded ());
 				libvlc_media_parse (mediaList [i]);
-				libvlc_media_set_meta (mediaList [i], libvlc_meta_URL, urls [i].toEncoded ());
+				if (libvlc_media_get_duration (mediaList [i]) == 0)
+				{
+					libvlc_media_release (mediaList [i]);
+					mediaList.removeAt (i);
+				}
+				else
+					libvlc_media_set_meta (mediaList [i], libvlc_meta_URL, urls [i].toEncoded ());
 			}
 		}
 		
@@ -200,5 +198,10 @@ namespace vlc
 	{
 		Parent_->AddUrl (url, false);
 	}
+	
+	QString PlaylistModel::ShrinkText (const QString& a, const QString& b)
+	{
+		return a + " " + FontMetrics_.elidedText (b, Qt::ElideRight, Width_ - FontMetrics_.width (a + " ") - 16);
+	}
 }
 }
diff --git a/src/plugins/vtyulc/playlistmodel.h b/src/plugins/vtyulc/playlistmodel.h
index 7bad421..d374cc1 100644
--- a/src/plugins/vtyulc/playlistmodel.h
+++ b/src/plugins/vtyulc/playlistmodel.h
@@ -31,6 +31,7 @@
 
 #include <QStandardItemModel>
 #include <QVector>
+#include <QFontMetrics>
 
 struct libvlc_media_list_t;
 struct libvlc_media_t;
@@ -44,20 +45,13 @@ namespace vlc
 {
 	class PlaylistWidget;
 	
-	enum Columns
-	{
-		ColumnName,
-		ColumnDuration,
-		ColumnMax
-	};
-	
 	class PlaylistModel : public QStandardItemModel
 	{
 		Q_OBJECT
 		
 		PlaylistWidget *Parent_;
 		libvlc_media_list_t *Playlist_;
-		QVector<QStandardItem*> Items_ [ColumnMax];
+		QVector<QStandardItem*> Items_;
 		libvlc_instance_t *Instance_;
 	
 	public:
@@ -70,9 +64,14 @@ namespace vlc
 		Qt::DropActions supportedDropActions () const;
 		
 		void AddUrl (const QUrl&);
+		libvlc_media_t* Take (const QUrl&);
+		
+		int Width_;
+		QFontMetrics FontMetrics_;
+		
 		
 	private:
-		libvlc_media_t* Take (const QUrl&);
+		QString ShrinkText (const QString&, const QString&);
 		
 	public slots:
 		void updateTable ();
diff --git a/src/plugins/vtyulc/playlisttitlewidget.cpp b/src/plugins/vtyulc/playlisttitlewidget.cpp
index 8090bbe..5ea8257 100644
--- a/src/plugins/vtyulc/playlisttitlewidget.cpp
+++ b/src/plugins/vtyulc/playlisttitlewidget.cpp
@@ -49,6 +49,12 @@ namespace vlc
 		
 		MagicAction_ = addAction (tr ("Magic sort"));
 		MagicAction_->setIcon (proxy->GetIcon ("tools-wizard"));
+		
+		UpAction_ = addAction (tr ("Up"));
+		UpAction_->setIcon (proxy->GetIcon ("arrow-up"));
+		
+		DownAction_ = addAction (tr ("Down"));
+		DownAction_->setIcon (proxy->GetIcon ("arrow-down"));
 	}
 }
 }
diff --git a/src/plugins/vtyulc/playlisttitlewidget.h b/src/plugins/vtyulc/playlisttitlewidget.h
index 9191edf..93e4ffb 100644
--- a/src/plugins/vtyulc/playlisttitlewidget.h
+++ b/src/plugins/vtyulc/playlisttitlewidget.h
@@ -49,6 +49,8 @@ namespace vlc
 		QAction *ClearAction_;
 		QAction *MagicAction_;
 		QAction *AddAction_;
+		QAction *UpAction_;
+		QAction *DownAction_;
 	};
 }
 }
diff --git a/src/plugins/vtyulc/playlistwidget.cpp b/src/plugins/vtyulc/playlistwidget.cpp
index 9a899d5..ded515e 100644
--- a/src/plugins/vtyulc/playlistwidget.cpp
+++ b/src/plugins/vtyulc/playlistwidget.cpp
@@ -52,7 +52,7 @@ namespace LeechCraft
 namespace vlc
 {
 	PlaylistWidget::PlaylistWidget (QIcon playIcon, QWidget *parent)
-	: QTreeView (parent)
+	: QListView (parent)
 	, LastPlayingItem_ (nullptr)
 	, PlayIcon_ (playIcon)
 	{
@@ -60,7 +60,6 @@ namespace vlc
 		setDropIndicatorShown (true);
 		setAcceptDrops (true);
 		setBaseSize (0, 0);
-		setRootIsDecorated (false);
 		setContextMenuPolicy (Qt::CustomContextMenu);
 		
 		connect (this,
@@ -71,17 +70,23 @@ namespace vlc
 	
 	PlaylistWidget::~PlaylistWidget ()
 	{
-		QStringList save;
+		QueueState res;
 		int size = libvlc_media_list_count (Playlist_);
 		for (int i = 0; i < size; i++)
-			save << QString (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL));
+			res.Playlist_ << QString (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL));
 		
-		if (LastPlayingItem_ == nullptr)
-			save << "0";
-		else
-			save << QString::number (LastPlayingItem_->row ());
+		if (!libvlc_media_player_get_media (NativePlayer_)) 
+		{
+			res.Current_ = 0;
+			res.Position_ = 0;
+		}
+		else 
+		{
+			res.Current_ = libvlc_media_list_index_of_item (Playlist_, libvlc_media_player_get_media (NativePlayer_));
+			res.Position_ = libvlc_media_player_get_time (NativePlayer_);
+		}
 		
-		emit savePlaylist (save);
+		emit savePlaylist (res);
 		
 		clearPlaylist ();
 
@@ -99,6 +104,7 @@ namespace vlc
 		NativePlayer_ = player;
 		
 		Model_ = new PlaylistModel (this, Playlist_, Instance_);
+		updateModelConstants ();
 		setModel (Model_);
 		
 		QTimer *timer = new QTimer (this);
@@ -111,22 +117,22 @@ namespace vlc
 		timer->start ();
 	}
 	
-	void PlaylistWidget::AddUrl (const QUrl& url, bool start)
+	libvlc_media_t* PlaylistWidget::AddUrl (const QUrl& url, bool start)
 	{
 		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
 			if (url.toEncoded () == libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL))
 			{
 				qWarning () << Q_FUNC_INFO << "Ignoring already added url";
-				return;
+				return nullptr;
 			}
 		
 		libvlc_media_t *m = libvlc_media_new_location (Instance_, url.toEncoded ());
 		libvlc_media_parse (m);
-		if (libvlc_media_get_duration (m) == 0) 
+		if (!libvlc_media_is_parsed (m) || libvlc_media_get_duration (m) == 0) 
 		{
 			libvlc_media_release (m);
 			qWarning () << Q_FUNC_INFO << "A little fail:" << url;
-			return;
+			return nullptr;
 		}
 		
 		libvlc_media_set_meta (m, libvlc_meta_URL, url.toEncoded ());
@@ -136,6 +142,8 @@ namespace vlc
 			libvlc_media_list_player_play (Player_);
 		
 		updateInterface ();
+		
+		return m;
 	}
 	
 	bool PlaylistWidget::IsPlaying () const
@@ -173,7 +181,7 @@ namespace vlc
 		if (currentRow == -1 || currentRow >= Model_->rowCount ())
 			return;
 				
-		LastPlayingItem_ = Model_->item (currentRow, ColumnName);
+		LastPlayingItem_ = Model_->item (currentRow, 0);
 		LastPlayingItem_->setIcon (QIcon (PlayIcon_));
 		
 		update ();
@@ -234,27 +242,33 @@ namespace vlc
 	
 	void PlaylistWidget::resizeEvent (QResizeEvent *event)
 	{
-		QFontMetrics metrics (font ());
-		const int len =  (metrics.width (" 00:00:00 "));
-		setColumnWidth (0, event->size ().width () - len);
-		setColumnWidth (1, len);
+		updateModelConstants ();
+	}
+	
+	void PlaylistWidget::updateModelConstants()
+	{
+		Model_->Width_ = width () - 10;
+		Model_->updateTable ();
 	}
 	
 	void PlaylistWidget::SetCurrentMedia (int current)
 	{
 		libvlc_media_t *media = libvlc_media_list_item_at_index (Playlist_, current);
-		if (current > -1 && current < libvlc_media_list_count (Playlist_))
+		if (media)
+			SetCurrentMedia (media);
+	}
+	
+	void PlaylistWidget::SetCurrentMedia (libvlc_media_t *media)
+	{
+		libvlc_media_list_player_play_item (Player_, media);
+		while (!libvlc_media_player_is_playing (NativePlayer_))
 		{
-			libvlc_media_list_player_play_item (Player_, media);
-			while (!libvlc_media_player_is_playing (NativePlayer_))
-			{
-				QEventLoop loop;
-				QTimer::singleShot (5, &loop, SLOT (quit ()));
-				loop.exec ();
-			}
-			
-			libvlc_media_player_stop (NativePlayer_);
+			QEventLoop loop;
+			QTimer::singleShot (5, &loop, SLOT (quit ()));
+			loop.exec ();
 		}
+		
+		libvlc_media_player_stop (NativePlayer_);
 	}
 	
 	void PlaylistWidget::clearPlaylist ()
@@ -263,14 +277,42 @@ namespace vlc
 			DeleteRequested (0);
 	}
 	
-	void PlaylistWidget::next()
+	void PlaylistWidget::next ()
 	{
 		libvlc_media_list_player_next (Player_);
 	}
 	
-	void PlaylistWidget::prev()
+	void PlaylistWidget::prev ()
 	{
 		libvlc_media_list_player_previous (Player_);
 	}
+	
+	void PlaylistWidget::down ()
+	{
+		int current = selectionModel ()->currentIndex ().row ();
+		if (current == libvlc_media_list_count (Playlist_) - 1 || current == -1)
+			return;
+		
+		libvlc_media_t *media = libvlc_media_list_item_at_index (Playlist_, current);
+		libvlc_media_list_remove_index (Playlist_, current);
+		libvlc_media_list_insert_media (Playlist_, media, current + 1);
+		
+		selectionModel()->setCurrentIndex (Model_->index (current + 1, 0), QItemSelectionModel::Select);
+		selectionModel()->select (Model_->index (current, 0), QItemSelectionModel::Deselect);
+	}
+
+	void PlaylistWidget::up ()
+	{
+		int current = selectionModel ()->currentIndex ().row ();
+		if (current == 0 || current == -1)
+			return;
+		
+		libvlc_media_t *media = libvlc_media_list_item_at_index (Playlist_, current);
+		libvlc_media_list_remove_index (Playlist_, current);
+		libvlc_media_list_insert_media (Playlist_, media, current - 1);
+		
+		selectionModel ()->setCurrentIndex (Model_->index (current - 1, 0), QItemSelectionModel::Select);
+		selectionModel ()->select (Model_->index (current, 0), QItemSelectionModel::Deselect);
+	}
 }
 }
diff --git a/src/plugins/vtyulc/playlistwidget.h b/src/plugins/vtyulc/playlistwidget.h
index 3cd7b4d..76a8978 100644
--- a/src/plugins/vtyulc/playlistwidget.h
+++ b/src/plugins/vtyulc/playlistwidget.h
@@ -31,7 +31,8 @@
 
 #include <QWidget>
 #include <QUrl>
-#include <QTreeView>
+#include <QListView>
+#include <vlc/libvlc_structures.h>
 
 struct libvlc_media_player_t;
 struct libvlc_media_list_player_t;
@@ -49,7 +50,14 @@ namespace vlc
 {
 	class PlaylistModel;
 	
-	class PlaylistWidget : public QTreeView
+	struct QueueState
+	{
+		QStringList Playlist_;
+		int Current_;
+		libvlc_time_t Position_;
+	};
+	
+	class PlaylistWidget : public QListView
 	{
 		Q_OBJECT
 		
@@ -67,7 +75,8 @@ namespace vlc
 		~PlaylistWidget ();
 		
 		void SetCurrentMedia (int);
-		void AddUrl (const QUrl&, bool start);
+		void SetCurrentMedia (libvlc_media_t*);
+		libvlc_media_t* AddUrl (const QUrl&, bool start);
 		bool IsPlaying () const;
 		void Init (libvlc_instance_t *instance, libvlc_media_player_t *player);
 		void DeleteRequested (int index);
@@ -76,10 +85,15 @@ namespace vlc
 		void mouseDoubleClickEvent (QMouseEvent*);
 		void resizeEvent (QResizeEvent*);
 		
+	private:
+		void updateModelConstants ();
+		
 	public slots:
 		void clearPlaylist ();
 		void next ();
 		void prev ();
+		void up ();
+		void down ();
 		
 	private slots:
 		void togglePlay ();
@@ -88,7 +102,7 @@ namespace vlc
 		void deleteRequested (QAction*);
 		
 	signals:
-		void savePlaylist (QStringList);
+		void savePlaylist (const QueueState&);
 	};
 }
 }
diff --git a/src/plugins/vtyulc/vlc.cpp b/src/plugins/vtyulc/vlc.cpp
index 704abf5..a9624f9 100644
--- a/src/plugins/vtyulc/vlc.cpp
+++ b/src/plugins/vtyulc/vlc.cpp
@@ -217,7 +217,7 @@ namespace vlc
 	{
 		if (entity.Entity_ == "Sleeping")
 			for (int i = 0; i < Tabs_.size (); i++)
-				Tabs_ [i]->Pause ();
+				Tabs_ [i]->Sleep ();
 	}
 }
 }
diff --git a/src/plugins/vtyulc/vlcplayer.cpp b/src/plugins/vtyulc/vlcplayer.cpp
index 4ff4f96..ea1e975 100644
--- a/src/plugins/vtyulc/vlcplayer.cpp
+++ b/src/plugins/vtyulc/vlcplayer.cpp
@@ -74,6 +74,11 @@ namespace vlc
 		libvlc_media_player_set_xwindow (Mp_.get (), parent->winId ());
 	}
 	
+	VlcPlayer::~VlcPlayer()
+	{
+		libvlc_media_player_stop (Mp_.get ());
+	}
+	
 	void VlcPlayer::Init (QWidget *parent)
 	{
 		libvlc_media_player_set_xwindow (Mp_.get (), parent->winId ());
@@ -133,6 +138,11 @@ namespace vlc
 		libvlc_media_player_stop (Mp_.get ());
 	}
 	
+	void VlcPlayer::pause ()
+	{
+		libvlc_media_player_pause (Mp_.get ());
+	}
+	
 	void VlcPlayer::changePosition (double pos)
 	{
 		if (libvlc_media_player_get_media (Mp_.get ()))
@@ -155,6 +165,19 @@ namespace vlc
 			return convertTime (0);
 	}
 	
+	void VlcPlayer::SetCurrentTime (libvlc_time_t time)
+	{
+		if (libvlc_media_player_is_playing (Mp_.get ()))
+			libvlc_media_player_set_time (Mp_.get (), time);
+		else
+		{
+			libvlc_media_player_play (Mp_.get ());
+			WaitForPlaying ();
+			libvlc_media_player_set_time (Mp_.get (), time);
+			libvlc_media_player_pause (Mp_.get ());
+		}
+	}
+	
 	void VlcPlayer::Freeze ()
 	{
 		emit unstable ();
diff --git a/src/plugins/vtyulc/vlcplayer.h b/src/plugins/vtyulc/vlcplayer.h
index bcb83d1..5f1edcf 100644
--- a/src/plugins/vtyulc/vlcplayer.h
+++ b/src/plugins/vtyulc/vlcplayer.h
@@ -69,6 +69,7 @@ namespace vlc
 		
 	public:
 		explicit VlcPlayer (QWidget *parent = 0);
+		~VlcPlayer();
 		
 		void AddSubtitles (const QString&);
 		bool NowPlaying () const;
@@ -96,6 +97,7 @@ namespace vlc
 		
 		QTime GetCurrentTime () const;
 		QTime GetFullTime () const;
+		void SetCurrentTime (libvlc_time_t);
 		
 	private:
 		libvlc_track_description_t* GetTrack (libvlc_track_description_t *t, int track) const;
@@ -109,6 +111,7 @@ namespace vlc
 	public slots:
 		void stop ();
 		void togglePlay ();
+		void pause ();
 		void addUrl (const QUrl&);
 		void setUrl (const QUrl&);
 		void changePosition (double);
diff --git a/src/plugins/vtyulc/vlcwidget.cpp b/src/plugins/vtyulc/vlcwidget.cpp
index e859556..0dd15b3 100644
--- a/src/plugins/vtyulc/vlcwidget.cpp
+++ b/src/plugins/vtyulc/vlcwidget.cpp
@@ -94,6 +94,7 @@ namespace vlc
 	, Parent_ (parent)
 	, Manager_ (manager)
 	, AllowFullScreenPanel_ (false)
+	, VolumeNotificationWidget_ (new VolumeNotification (this))
 	, Autostart_ (true)
 	{
 		VlcMainWidget_ = new SignalledWidget;
@@ -109,12 +110,6 @@ namespace vlc
 		PlaylistDock_->setAllowedAreas (Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
 		TitleWidget_ = new PlaylistTitleWidget (proxy, this);
 		PlaylistDock_->setTitleBarWidget (TitleWidget_);
-
-		auto mw = proxy->GetRootWindowsManager ()->GetMWProxy (0);
-		mw->AddDockWidget (Qt::LeftDockWidgetArea, PlaylistDock_);
-		mw->AssociateDockWidget (PlaylistDock_, this);
-		mw->ToggleViewActionVisiblity (PlaylistDock_, false);
-
 		PlaylistDock_->setWidget (PlaylistWidget_);
 
 		VlcPlayer_ = new VlcPlayer (VlcMainWidget_);
@@ -189,9 +184,9 @@ namespace vlc
 				SLOT (disableScreenSaver ()));
 
 		connect (PlaylistWidget_,
-				SIGNAL (savePlaylist (QStringList)),
+				SIGNAL (savePlaylist (QueueState)),
 				this,
-				SLOT (savePlaylist (QStringList)));
+				SLOT (savePlaylist (QueueState)));
 
 		connect (VlcPlayer_,
 				SIGNAL (stable ()),
@@ -212,20 +207,50 @@ namespace vlc
 				SIGNAL (triggered ()),
 				PlaylistWidget_,
 				SLOT (clearPlaylist ()));
+		
+		connect (VlcMainWidget_,
+				SIGNAL (resized (QResizeEvent*)),
+				this,
+				SLOT (mainWidgetResized (QResizeEvent*)));
+		
+		connect (SoundWidget_,
+				SIGNAL (volumeChanged (int)),
+				VolumeNotificationWidget_,
+				SLOT (showNotification (int)));
+		
+		connect (TitleWidget_->UpAction_,
+				SIGNAL (triggered ()),
+				PlaylistWidget_,
+				SLOT (up ()));
+		
+		connect (TitleWidget_->DownAction_,
+				SIGNAL (triggered ()),
+				PlaylistWidget_,
+				SLOT (down ()));
 
 		InitNavigations ();
 		InitVolumeActions ();
 		InitRewindActions ();
 		setAcceptDrops (true);
 		RestoreSettings ();
+
+		PlaylistDock_->setMinimumWidth (Settings_->value ("PlaylistWidth", 300).toInt ());
+		PlaylistDock_->update ();
+ 		PlaylistDock_->setMinimumWidth (0);
+		auto mw = proxy->GetRootWindowsManager ()->GetMWProxy (0);
+		mw->AddDockWidget ((Qt::DockWidgetArea)Settings_->value ("PlaylistArea", Qt::RightDockWidgetArea).toInt (), PlaylistDock_);
+		mw->AssociateDockWidget (PlaylistDock_, this);
+		mw->ToggleViewActionVisiblity (PlaylistDock_, false);
+		
+		connect (PlaylistDock_,
+				SIGNAL (dockLocationChanged (Qt::DockWidgetArea)),
+				this,
+				SLOT (savePlaylistPosition (Qt::DockWidgetArea)));
 	}
 
 	VlcWidget::~VlcWidget ()
 	{
-		VlcPlayer_->stop ();
-		disableScreenSaver ();
 		delete PlaylistWidget_;
-		delete PlaylistDock_;
 		delete VlcPlayer_;
 		SaveSettings ();
 		emit deleteMe (this);
@@ -236,29 +261,47 @@ namespace vlc
 		Settings_ = new QSettings (QCoreApplication::organizationName (), QCoreApplication::applicationName () + "_VTYULC");
 		RestorePlaylist ();
 		Autostart_ = XmlSettingsManager::Instance ().property ("Autostart").toBool ();
+		VideoPath_ = Settings_->value ("WorkingDirectory", QDir::currentPath ()).toString ();
 	}
 
 	void VlcWidget::SaveSettings ()
 	{
+		Settings_->setValue ("PlaylistWidth", PlaylistDock_->width ());
 		delete Settings_;
 	}
-
-	void VlcWidget::savePlaylist (const QStringList& list)
+	
+	void VlcWidget::savePlaylistPosition (Qt::DockWidgetArea area)
+	{
+		Settings_->setValue ("PlaylistArea", static_cast<int> (area));
+	}
+	
+	void VlcWidget::savePlaylist (const QueueState& playlist)
 	{
-		qDebug () << list;
-		Settings_->setValue ("Playlist", list);
+		Settings_->setValue ("Playlist", playlist.Playlist_);
+		Settings_->setValue ("LastPlaying", playlist.Current_);
+		Settings_->setValue ("LastTime", (long long)playlist.Position_);
 	}
 
 	void VlcWidget::RestorePlaylist ()
 	{
 		QStringList playlist = Settings_->value ("Playlist").toStringList ();
-		if (playlist.size () < 2)
-			return;
-
-		for (int i = 0; i < playlist.size () - 1; i++)
-			PlaylistWidget_->AddUrl (QUrl::fromEncoded (playlist [i].toUtf8 ()), false);
+		int lastPlaying = Settings_->value ("LastPlaying").toInt ();
+	
+		libvlc_media_t *current = nullptr, *media;
+		for (int i = 0; i < playlist.size (); i++)
+		{
+			media = PlaylistWidget_->AddUrl (QUrl::fromEncoded (playlist [i].toUtf8 ()), false);
+			if (i == lastPlaying)
+				current = media;
+		}
 
-		PlaylistWidget_->SetCurrentMedia (playlist [playlist.size () - 1].toInt ());
+		if (current != nullptr)
+		{
+			PlaylistWidget_->SetCurrentMedia (current);
+			const long long time = Settings_->value ("LastTime").toLongLong ();
+			if (time)
+				VlcPlayer_->SetCurrentTime (time);
+		}
 	}
 
 	QObject* VlcWidget::ParentMultiTabs ()
@@ -280,8 +323,12 @@ namespace vlc
 	{
 		QStringList files = QFileDialog::getOpenFileNames (this,
 				tr ("Open files"),
-				tr ("Videos (*.mkv *.avi *.mov *.mpg)"));
+				VideoPath_,
+				tr ("Videos (*.mkv *.avi *.mov *.mpg);;Any (*.*)"));
 
+		if (!files.isEmpty ())
+			ParsePath (files [0]);
+		
 		PlaylistWidget_->clearPlaylist ();
 		for (int i = 0; i < files.size (); i++)
 			if (QFile::exists (files [i]))
@@ -292,8 +339,12 @@ namespace vlc
 	{
 		QStringList files = QFileDialog::getOpenFileNames (this,
 				tr ("Open files"),
-				tr ("Videos (*.mkv *.avi *.mov *.mpg)"));
-
+				VideoPath_,
+				tr ("Videos (*.mkv *.avi *.mov *.mpg);;Any (*.*)"));
+		
+		if (!files.isEmpty ())
+			ParsePath (files [0]);
+		
 		for (int i = 0; i < files.size (); i++)
 			if (QFile::exists (files [i]))
 				PlaylistWidget_->AddUrl (QUrl::fromLocalFile (files [i]), Autostart_);
@@ -304,10 +355,11 @@ namespace vlc
 	{
 		QString folder = QFileDialog::getExistingDirectory (this,
 				tr ("Open folder"),
-				tr ("Folder with video"));
+				VideoPath_);
 
 		if (QFile::exists (folder))
 		{
+			ParsePath (folder);
 			PlaylistWidget_->clearPlaylist ();
 			PlaylistWidget_->AddUrl ("directory://" + folder, Autostart_);
 		}
@@ -317,10 +369,11 @@ namespace vlc
 	{
 		QString folder = QFileDialog::getExistingDirectory (this,
 				tr ("Open DVD"),
-				tr ("Root of DVD directory"));
+				VideoPath_);
 
 		if (QFile::exists (folder))
 		{
+			ParsePath (folder);
 			PlaylistWidget_->clearPlaylist ();
 			PlaylistWidget_->AddUrl ("dvdsimple://" + folder, Autostart_);
 		}
@@ -330,10 +383,11 @@ namespace vlc
 	{
 		QString folder = QFileDialog::getExistingDirectory (this,
 				tr ("Open DVD"),
-				tr ("Root of DVD directory"));
+				VideoPath_);
 
 		if (QFile::exists (folder))
 		{
+			ParsePath (folder);
 			PlaylistWidget_->clearPlaylist ();
 			PlaylistWidget_->AddUrl ("dvd://" + folder, Autostart_);
 		}
@@ -354,10 +408,22 @@ namespace vlc
 	{
 		const QString& url = QFileDialog::getOpenFileName (this,
 				tr ("Open file"),
-				tr ("Media (*.ac3)"));
+				tr ("Media (*.ac3);;Any (*.*)"),
+				VideoPath_);
 
 		if (QFile::exists (url))
+		{
+			ParsePath (url);
 			VlcPlayer_->addUrl (QUrl::fromLocalFile (url));
+		}
+	}
+	
+	void VlcWidget::ParsePath (QString s)
+	{
+		while (s.length () && s[s.length () - 1] != '/')
+			s.remove (s.length () - 1, 1);
+		
+		Settings_->setValue ("WorkingDirectory", s);
 	}
 
 	void VlcWidget::updateInterface ()
@@ -468,6 +534,7 @@ namespace vlc
 			FullScreenWidget_->SetBackGroundColor (new QColor ("black"));
 			FullScreenWidget_->showFullScreen ();
 			VlcPlayer_->switchWidget (FullScreenWidget_);
+			VolumeNotificationWidget_->resetGeometry (FullScreenWidget_);
 		}
 		else
 		{
@@ -476,6 +543,7 @@ namespace vlc
 			FullScreenWidget_->hide ();
 			FullScreenPanel_->hide ();
 			VlcPlayer_->switchWidget (VlcMainWidget_);
+			VolumeNotificationWidget_->resetGeometry (VlcMainWidget_);
 		}
 	}
 
@@ -1061,10 +1129,15 @@ namespace vlc
 	{
 		Autostart_ = XmlSettingsManager::Instance ().property ("Autostart").toBool ();
 	}
-
-	void VlcWidget::Pause ()
+	
+	void VlcWidget::Sleep ()
+	{
+		VlcPlayer_->pause ();
+	}
+	
+	void VlcWidget::mainWidgetResized (QResizeEvent *event)
 	{
-		libvlc_media_player_pause (VlcPlayer_->GetPlayer ().get ());
+		VolumeNotificationWidget_->resetGeometry (VlcMainWidget_);
 	}
 }
 }
diff --git a/src/plugins/vtyulc/vlcwidget.h b/src/plugins/vtyulc/vlcwidget.h
index c22a7b8..6ab63f6 100644
--- a/src/plugins/vtyulc/vlcwidget.h
+++ b/src/plugins/vtyulc/vlcwidget.h
@@ -37,6 +37,7 @@
 #include "soundwidget.h"
 #include "signalledwidget.h"
 #include "playlistwidget.h"
+#include "volumenotification.h"
 
 class QToolBar;
 class QMenu;
@@ -118,8 +119,10 @@ namespace vlc
 		SignalledWidget *VlcMainWidget_;
 		SoundWidget *SoundWidget_;
 		SoundWidget *FullScreenSoundWidget_;
+		VolumeNotification *VolumeNotificationWidget_;
 		QMenu *ContextMenu_;
 		QSettings *Settings_;
+		QString VideoPath_;
 		
 		bool Autostart_;
 		
@@ -136,7 +139,7 @@ namespace vlc
 		void TabMadeCurrent ();
 		void TabLostCurrent ();
 		
-		void Pause ();
+		void Sleep ();
 		
 	private:
 		QString GetNewSubtitles ();
@@ -154,6 +157,8 @@ namespace vlc
 		void RestoreSettings ();
 		void RestorePlaylist ();
 		
+		void ParsePath (QString);
+		
 	public slots:
 		void autostartChanged ();
 		
@@ -183,6 +188,7 @@ namespace vlc
 		void wheelEvent (QWheelEvent*);
 		void dropEvent (QDropEvent*);
 		void dragEnterEvent (QDragEnterEvent*);
+		void mainWidgetResized (QResizeEvent*);
 		
 		void fullScreenPanelRequested ();
 		void hideFullScreenPanel ();
@@ -192,7 +198,8 @@ namespace vlc
 		
 		void disableScreenSaver ();
 		
-		void savePlaylist (const QStringList&);
+		void savePlaylist (const QueueState&);
+		void savePlaylistPosition (Qt::DockWidgetArea);
 		
 	signals:
 		void deleteMe (QWidget*);
diff --git a/src/plugins/vtyulc/volumenotification.cpp b/src/plugins/vtyulc/volumenotification.cpp
new file mode 100644
index 0000000..341dcd5
--- /dev/null
+++ b/src/plugins/vtyulc/volumenotification.cpp
@@ -0,0 +1,99 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#include <QTimer>
+#include <QPainter>
+#include <QBrush>
+#include <QPaintEvent>
+#include "volumenotification.h"
+
+namespace 
+{
+	int globalX (QWidget *widget)
+	{
+		if (widget == nullptr)
+			return 0;
+		else
+			return widget->x () + globalX (widget->parentWidget ());
+	}
+	
+	int globalY (QWidget *widget)
+	{
+		if (widget == nullptr)
+			return 0;
+		else
+			return widget->y () + globalY (widget->parentWidget ());
+	}
+}
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	VolumeNotification::VolumeNotification (QWidget *parent)
+	: QWidget (parent, Qt::Tool | Qt::X11BypassWindowManagerHint)
+	, volume (0)
+	, hideTimer (new QTimer (parent))
+	{
+		hideTimer->setInterval (1000);
+		connect (hideTimer,
+				SIGNAL (timeout ()),
+				this,
+				SLOT (hide ()));
+		
+		setAttribute (Qt::WA_TranslucentBackground);
+	}
+	
+	void VolumeNotification::showNotification (int newVolume)
+	{
+		hideTimer->start ();
+		volume = newVolume;
+		update ();
+		if (!isVisible())
+			show ();
+	}
+	
+	void VolumeNotification::paintEvent (QPaintEvent *event)
+	{
+		QPainter p(this);
+		
+		p.setFont (QFont ("Arial", 20));
+		p.setPen (QPen (QBrush (Qt::white), 5));
+		p.drawText (1, 20, tr ("Volume: %1%").arg (volume == -1 ? 100 : volume));
+			
+		p.end ();
+		event->accept ();
+	}
+	
+	void VolumeNotification::resetGeometry(QWidget *widget)
+	{
+		setGeometry(widget->width () + globalX (widget) - 200, globalY (widget) + 50, 200, 200);
+	}
+}
+}
diff --git a/src/plugins/vtyulc/volumenotification.h b/src/plugins/vtyulc/volumenotification.h
new file mode 100644
index 0000000..c191fbd
--- /dev/null
+++ b/src/plugins/vtyulc/volumenotification.h
@@ -0,0 +1,59 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#pragma once
+
+#include <QWidget>
+
+class QTimer;
+class QPaintEvent;
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	class VolumeNotification : public QWidget
+	{
+		Q_OBJECT
+		
+		int volume;
+		QTimer *hideTimer;
+	
+	public:
+		explicit VolumeNotification (QWidget *parent = 0);
+		void resetGeometry (QWidget*);
+		
+	protected:
+		void paintEvent (QPaintEvent*);
+	
+	public slots:
+		void showNotification (int);
+	};
+}
+}
