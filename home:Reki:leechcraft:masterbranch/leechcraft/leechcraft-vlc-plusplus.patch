diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 9554cc9..4698697 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -215,6 +215,7 @@ cmake_dependent_option (ENABLE_SHAITAN "Build Shaitan, Embedded terminal emulato
 cmake_dependent_option (ENABLE_SYSNOTIFY "Build Sysnotify for using D-Bus notification API" ${WITH_PLUGINS} "NOT WIN32" OFF)
 option (ENABLE_TOUCHSTREAMS "Build TouchStreams, VK.com music streaming plugin" ${WITH_PLUGINS})
 option (ENABLE_TPI "Build Task Progress Indicator quark plugin" ${WITH_PLUGINS})
+option (ENABLE_VLC "Build vlc, the videoplayer plugin" ${WITH_PLUGINS})
 option (ENABLE_VROOBY "Build Vrooby, removable storage devices manager" ${WITH_PLUGINS})
 option (ENABLE_XPROXY "Build XProxy, the advanced proxy manager" ${WITH_PLUGINS})
 option (ENABLE_XTAZY "Build Xtazy, plugin for keeping track of a currently playing song" ${WITH_PLUGINS})
@@ -225,7 +226,6 @@ option (ENABLE_SNAILS "Build Snails, LeechCraft mail client" OFF)
 option (ENABLE_TWIFEE "Build Twifee, the Twitter client" OFF)
 option (ENABLE_CEMENTO "Build Cemento, LeechCraft common persistent storage" OFF)
 option (ENABLE_WOODPECKER "Build Woodpecker, twitter client" ${WITH_PLUGINS})
-option (ENABLE_VLC "Build vlc, plugin for video" OFF)
 
 # Dumb alternatives
 option (ENABLE_DUMBEEP "Build Dumbeep, a dumb sound notifier for those fearing true LMP power" OFF)
diff --git a/src/plugins/vlc/CMakeLists.txt b/src/plugins/vlc/CMakeLists.txt
index 0fc6050..49ed657 100644
--- a/src/plugins/vlc/CMakeLists.txt
+++ b/src/plugins/vlc/CMakeLists.txt
@@ -15,11 +15,15 @@ include_directories (
 	)
 set (SRCS
 	vlc.cpp
+	playlistwidget.cpp
 	vlcwidget.cpp
 	vlcplayer.cpp
 	vlcscrollbar.cpp
 	signalledwidget.cpp
 	soundwidget.cpp
+	playlistmodel.cpp
+	xmlsettingsmanager.cpp
+	playlisttitlewidget.cpp
 	)
 	
 #CreateTrs("vlc" "en;ru_RU" COMPILED_TRANSLATIONS)
@@ -30,9 +34,12 @@ add_library (leechcraft_vlc SHARED
 	${SRCS}
 	${UIS_H}
 	)
+	
 target_link_libraries (leechcraft_vlc
 	${QT_LIBRARIES}
 	${LEECHCRAFT_LIBRARIES}
 	${VLC_LIBRARIES}
 	)
+	
 install (TARGETS leechcraft_vlc DESTINATION ${LC_PLUGINS_DEST})
+install (FILES vlcsettings.xml DESTINATION ${LC_SETTINGS_DEST})
diff --git a/src/plugins/vlc/playlistmodel.cpp b/src/plugins/vlc/playlistmodel.cpp
new file mode 100644
index 0000000..37ddee4
--- /dev/null
+++ b/src/plugins/vlc/playlistmodel.cpp
@@ -0,0 +1,203 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#include "playlistmodel.h"
+#include <QModelIndex>
+#include <QVariant>
+#include <QTime>
+#include <QTimer>
+#include <QMimeData>
+#include <QDebug>
+#include <QItemSelectionModel>
+#include <QUrl>
+#include <vlc/vlc.h>
+#include "playlistwidget.h"
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	PlaylistModel::PlaylistModel (PlaylistWidget *parent, libvlc_media_list_t *playlist, libvlc_instance_t *instance)
+	: QStandardItemModel (parent)
+	, Parent_ (parent)
+	, Playlist_ (playlist)
+	, Instance_ (instance)
+	{
+		setColumnCount (2);
+		setHorizontalHeaderLabels ({ tr ("Name"), tr ("Duration") });
+		setSupportedDragActions (Qt::MoveAction | Qt::CopyAction);
+	}
+	
+	PlaylistModel::~PlaylistModel ()
+	{
+		setRowCount (0);
+	}
+	
+	void PlaylistModel::updateTable ()
+	{
+		setRowCount (libvlc_media_list_count (Playlist_));
+		if (libvlc_media_list_count (Playlist_) != Items_ [0].size ())
+		{
+			int cnt = Items_ [ColumnName].size ();
+			Items_ [ColumnName].resize (libvlc_media_list_count (Playlist_));
+			Items_ [ColumnDuration].resize (libvlc_media_list_count (Playlist_));
+			
+			for (int i = cnt; i < Items_ [0].size (); i++)
+			{
+				Items_ [ColumnName] [i] = new QStandardItem;
+				Items_ [ColumnName] [i]->setFlags (Qt::ItemIsDragEnabled | Qt::ItemIsDropEnabled | Qt::ItemIsEnabled | Qt::ItemIsSelectable);
+				Items_ [ColumnDuration] [i] = new QStandardItem;
+				Items_ [ColumnDuration] [i]->setFlags (Qt::ItemIsDropEnabled | Qt::ItemIsEnabled);
+			}
+		}
+		
+		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
+		{
+			libvlc_media_t *media = libvlc_media_list_item_at_index (Playlist_, i);
+			Items_ [ColumnName] [i]->setText (QString::fromUtf8 (libvlc_media_get_meta (media, libvlc_meta_Title)));
+			
+			if (!libvlc_media_is_parsed (media))
+				libvlc_media_parse (media);
+				
+			QTime time (0, 0);
+			time = time.addMSecs (libvlc_media_get_duration (media));
+			Items_ [ColumnDuration] [i]->setText (time.toString ("hh:mm:ss"));
+		}
+		
+		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
+		{
+			setItem (i, ColumnName, Items_ [ColumnName] [i]);
+			setItem (i, ColumnDuration, Items_ [ColumnDuration] [i]);
+		}
+	}
+	
+	bool PlaylistModel::dropMimeData (const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex& parent)
+	{
+		const QList<QUrl>& urls = data->urls ();
+		if (urls.size () == 0)
+			return false;
+		
+		if (parent != invisibleRootItem ()->index ())
+			row = parent.row () - 1;
+		else	
+			row -= 2;
+		
+		QUrl insertAfter;
+		for (int i = row; i > 0; i--)
+		{
+			QUrl url = QUrl::fromEncoded(libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL));
+			if (!urls.contains (url))
+			{
+				insertAfter = url;
+				break;
+			}
+		}
+		
+		QList<libvlc_media_t*> mediaList;
+		for (int i = 0; i < urls.size (); i++)
+		{
+			libvlc_media_t *media = Take (urls [i]);
+			if (media)
+				mediaList << media;
+			else
+			{
+				mediaList << libvlc_media_new_path (Instance_, urls [i].toEncoded ());
+				libvlc_media_set_meta (mediaList [i], libvlc_meta_URL, urls [i].toEncoded ());
+			}
+		}
+		
+		int after;
+		if (insertAfter.isEmpty ())
+			after = -1;
+		else
+			for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
+				if (QUrl (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL)) == insertAfter)
+				{
+					after = i;
+					break;
+				}
+				
+		if (!parent.isValid () && (after == -1))  // VLC forever
+			for (int i = 0; i < urls.size (); i++)
+				libvlc_media_list_add_media (Playlist_, mediaList [i]);
+		else
+			for (int i = 0; i < urls.size (); i++)
+				libvlc_media_list_insert_media (Playlist_, mediaList [i], after + i + 2);
+		
+		updateTable ();
+		
+		return true;
+	}
+	
+	QStringList PlaylistModel::mimeTypes () const
+	{
+		return { "text/uri-list" };
+	}
+	
+	QMimeData* PlaylistModel::mimeData (const QModelIndexList& indexes) const
+	{
+		if (libvlc_media_list_count (Playlist_) == 1)
+			return nullptr;
+		
+		QMimeData *result = new QMimeData;
+		QList<QUrl> urls;
+		for (int i = 0; i < indexes.size (); i++)
+			if (indexes [i].column () == 0)
+				urls << QUrl (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, indexes [i].row ()), libvlc_meta_URL));
+		
+		result->setUrls (urls);
+		return result;
+	}
+	
+	Qt::DropActions PlaylistModel::supportedDropActions () const
+	{
+		return Qt::MoveAction | Qt::CopyAction;
+	}
+		
+	libvlc_media_t* PlaylistModel::Take (const QUrl& url)
+	{
+		libvlc_media_t *res = nullptr;
+		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++) {
+			if (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL) == url.toEncoded ())
+			{
+				res = libvlc_media_list_item_at_index (Playlist_, i);
+				libvlc_media_list_remove_index (Playlist_, i);
+				break;
+			}
+		}
+		
+		return res;
+	}
+	
+	void PlaylistModel::AddUrl (const QUrl& url)
+	{
+		Parent_->AddUrl (url, false);
+	}
+}
+}
diff --git a/src/plugins/vlc/playlistmodel.h b/src/plugins/vlc/playlistmodel.h
new file mode 100644
index 0000000..7b088b9
--- /dev/null
+++ b/src/plugins/vlc/playlistmodel.h
@@ -0,0 +1,81 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#pragma once
+
+#include <QStandardItemModel>
+#include <QVector>
+
+struct libvlc_media_list_t;
+struct libvlc_media_t;
+struct libvlc_instance_t;
+
+class QMimeData;
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	class PlaylistWidget;
+	
+	enum Columns
+	{
+		ColumnName,
+		ColumnDuration,
+		ColumnMax
+	};
+	
+	class PlaylistModel : public QStandardItemModel
+	{
+		Q_OBJECT
+		
+		libvlc_media_list_t *Playlist_;
+		QVector<QStandardItem*> Items_ [ColumnMax];
+		PlaylistWidget *Parent_;
+		libvlc_instance_t *Instance_;
+	
+	public:
+		explicit PlaylistModel (PlaylistWidget *parent, libvlc_media_list_t *playlist, libvlc_instance_t *instance);
+		~PlaylistModel ();
+		
+		bool dropMimeData (const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex& parent);
+		QStringList mimeTypes () const;
+		QMimeData* mimeData (const QModelIndexList&) const;
+		Qt::DropActions supportedDropActions () const;
+		
+		void AddUrl (const QUrl&);
+		
+	private:
+		libvlc_media_t* Take (const QUrl&);
+		
+	public slots:
+		void updateTable ();
+	};
+}
+}
diff --git a/src/plugins/vlc/playlisttitlewidget.cpp b/src/plugins/vlc/playlisttitlewidget.cpp
new file mode 100644
index 0000000..03558b3
--- /dev/null
+++ b/src/plugins/vlc/playlisttitlewidget.cpp
@@ -0,0 +1,75 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#include "playlisttitlewidget.h"
+#include <QVBoxLayout>
+#include <QHBoxLayout>
+#include <QToolButton>
+#include <QAction>
+#include <QLabel>
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	PlaylistTitleWidget::PlaylistTitleWidget (ICoreProxy_ptr proxy, QWidget *parent)
+	: QWidget (parent)
+	{
+		QVBoxLayout *layout = new QVBoxLayout;
+		layout->addWidget (new QLabel (tr ("Playlist")));
+		QWidget *widget = new QWidget;
+		
+		QHBoxLayout *layout2 = new QHBoxLayout;
+		
+		ClearPlaylist_ = new QToolButton;
+		ClearAction_ = new QAction (ClearPlaylist_);
+		ClearAction_->setIcon (proxy->GetIcon ("edit-clear-list"));
+		ClearPlaylist_->setDefaultAction (ClearAction_);
+		
+		MagicSort_ = new QToolButton;
+		MagicAction_ = new QAction (MagicSort_);
+		MagicAction_->setIcon (proxy->GetIcon ("tools-wizard"));
+		MagicSort_->setDefaultAction (MagicAction_);
+		
+		AddFiles_ = new QToolButton;
+		AddAction_ = new QAction (AddFiles_);
+		AddAction_->setIcon (proxy->GetIcon ("document-open-folder"));
+		AddFiles_->setDefaultAction (AddAction_);
+		
+		layout2->addWidget (AddFiles_);
+		layout2->addWidget (MagicSort_);
+		layout2->addWidget (ClearPlaylist_);
+		layout2->addStretch (255);
+	
+		widget->setLayout (layout2);		
+		layout->addWidget (widget);
+		setLayout (layout);
+	}
+}
+}
diff --git a/src/plugins/vlc/playlisttitlewidget.h b/src/plugins/vlc/playlisttitlewidget.h
new file mode 100644
index 0000000..2eedfb5
--- /dev/null
+++ b/src/plugins/vlc/playlisttitlewidget.h
@@ -0,0 +1,58 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#pragma once
+
+#include <QWidget>
+#include <interfaces/core/icoreproxy.h>
+
+class QToolButton;
+class QAction;
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	class PlaylistTitleWidget : public QWidget
+	{
+		Q_OBJECT
+		
+		QToolButton *ClearPlaylist_;
+		QToolButton *MagicSort_;
+		QToolButton *AddFiles_;
+	
+	public:
+		explicit PlaylistTitleWidget (ICoreProxy_ptr proxy, QWidget *parent = 0);
+		
+		QAction *ClearAction_;
+		QAction *MagicAction_;
+		QAction *AddAction_;
+	};
+}
+}
diff --git a/src/plugins/vlc/playlistwidget.cpp b/src/plugins/vlc/playlistwidget.cpp
new file mode 100644
index 0000000..35f10f4
--- /dev/null
+++ b/src/plugins/vlc/playlistwidget.cpp
@@ -0,0 +1,259 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANusers/vtyulb/TY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#include "playlistwidget.h"
+#include <QDragEnterEvent>
+#include <QDropEvent>
+#include <QVBoxLayout>
+#include <QTimer>
+#include <QString>
+#include <QRect>
+#include <QModelIndex>
+#include <QAction>
+#include <QMenu>
+#include <QPaintEvent>
+#include <QPainter>
+#include <QDebug>
+#include <QFontMetrics>
+#include <QStandardItem>
+#include <QStringList>
+#include <QEventLoop>
+#include <vlc/vlc.h>
+#include "playlistmodel.h"
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	PlaylistWidget::PlaylistWidget (QIcon playIcon, QWidget *parent)
+	: QTreeView (parent)
+	, PlayIcon_ (playIcon)
+	, LastPlayingItem_ (nullptr)
+	{
+		setDragEnabled (true);
+		setDropIndicatorShown (true);
+		setAcceptDrops (true);
+		setBaseSize (0, 0);
+		setRootIsDecorated (false);
+		setContextMenuPolicy (Qt::CustomContextMenu);
+		
+		connect (this,
+				SIGNAL (customContextMenuRequested (QPoint)),
+				this,
+				SLOT (createMenu (QPoint)));
+	}
+	
+	PlaylistWidget::~PlaylistWidget ()
+	{
+		QStringList save;
+		int size = libvlc_media_list_count (Playlist_);
+		for (int i = 0; i < size; i++)
+			save << QString (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL));
+		
+		if (LastPlayingItem_ == nullptr)
+			save << "0";
+		else
+			save << QString::number (LastPlayingItem_->row ());
+		
+		emit savePlaylist (save);
+		
+		clearPlaylist ();
+
+		libvlc_media_list_release (Playlist_);
+		libvlc_media_list_player_release (Player_);
+	}
+	
+	void PlaylistWidget::Init (libvlc_instance_t *instance, libvlc_media_player_t *player)
+	{
+		Player_ = libvlc_media_list_player_new (instance);
+		Instance_ = instance;
+		libvlc_media_list_player_set_media_player (Player_, player);
+		Playlist_ = libvlc_media_list_new (Instance_);
+		libvlc_media_list_player_set_media_list (Player_, Playlist_);
+		NativePlayer_ = player;
+		
+		Model_ = new PlaylistModel (this, Playlist_, Instance_);
+		setModel (Model_);
+		
+		QTimer *timer = new QTimer (this);
+		timer->setInterval (300);
+		connect (timer,
+				SIGNAL (timeout ()),
+				this,
+				SLOT (updateInterface ()));
+		
+		timer->start ();
+	}
+	
+	void PlaylistWidget::AddUrl (const QUrl& url, bool start)
+	{
+		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
+			if (url.toEncoded () == libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL))
+			{
+				qWarning () << Q_FUNC_INFO << "Ignoring already added url";
+				return;
+			}
+		
+		libvlc_media_t *m = libvlc_media_new_path (Instance_, url.toEncoded ());
+		libvlc_media_set_meta (m, libvlc_meta_URL, url.toEncoded ());
+		libvlc_media_list_add_media (Playlist_, m);
+		
+		if (start)
+			libvlc_media_list_player_play (Player_);
+		
+		updateInterface ();
+	}
+	
+	bool PlaylistWidget::IsPlaying () const
+	{
+		return libvlc_media_list_player_is_playing (Player_);
+	}
+	
+	void PlaylistWidget::togglePlay ()
+	{
+		if (IsPlaying ())
+			libvlc_media_list_player_pause (Player_);
+		else
+			libvlc_media_list_player_play (Player_);
+	}
+	
+	void PlaylistWidget::updateInterface ()
+	{
+		Model_->updateTable ();
+		int currentRow = libvlc_media_list_index_of_item (Playlist_, libvlc_media_player_get_media (NativePlayer_));
+				
+		bool find = false;
+		for (int i = 0; i < Model_->rowCount (); i++)
+			if (LastPlayingItem_ == Model_->item (i))
+			{
+				find = true;
+				break;
+			}
+			
+		if (!find)
+			LastPlayingItem_ = nullptr;
+		
+		if (LastPlayingItem_)
+			LastPlayingItem_->setIcon (QIcon ());
+		
+		if (currentRow == -1 || currentRow >= Model_->rowCount ())
+			return;
+				
+		LastPlayingItem_ = Model_->item (currentRow, ColumnName);
+		LastPlayingItem_->setIcon (QIcon (PlayIcon_));
+		
+		update ();
+	}
+	
+	void PlaylistWidget::createMenu (QPoint p)
+	{
+		int index = indexAt (p).row ();
+		if (index == -1)
+			return;
+		
+		QMenu menu;
+		QAction *action = new QAction (&menu);
+		action->setText ("Delete");
+		action->setData (QVariant (index));
+		menu.addAction (action);
+
+		connect (&menu,
+				SIGNAL (triggered (QAction*)),
+				this,
+				SLOT (deleteRequested (QAction*)));
+
+		menu.exec (QCursor::pos ());
+	}
+	
+	void PlaylistWidget::deleteRequested (QAction *object)
+	{
+		DeleteRequested (object->data ().toInt ());
+	}
+	
+	void PlaylistWidget::DeleteRequested (int index)
+	{
+		libvlc_media_t *media = libvlc_media_list_item_at_index (Playlist_, index);
+		libvlc_media_list_remove_index (Playlist_, index);
+		libvlc_media_release (media);
+		Model_->updateTable ();
+	}
+	
+	void PlaylistWidget::mouseDoubleClickEvent (QMouseEvent *event)
+	{
+		int row = indexAt (event->pos ()).row ();
+		if (row > -1 && row < libvlc_media_list_count (Playlist_))
+			libvlc_media_list_player_play_item_at_index (Player_, row);
+		
+		updateInterface ();
+		event->accept ();
+	}
+	
+	void PlaylistWidget::resizeEvent (QResizeEvent *event)
+	{
+		QFontMetrics metrics (font ());
+		const int len =  (metrics.width (" 00:00:00 "));
+		setColumnWidth (0, event->size ().width () - len);
+		setColumnWidth (1, len);
+	}
+	
+	void PlaylistWidget::SetCurrentMedia (int current)
+	{
+		libvlc_media_t *media = libvlc_media_list_item_at_index (Playlist_, current);
+		if (current > -1 && current < libvlc_media_list_count (Playlist_))
+		{
+			int count = libvlc_media_list_count (Playlist_);
+			libvlc_media_list_player_play_item (Player_, media);
+			while (!libvlc_media_player_is_playing (NativePlayer_))
+			{
+				QEventLoop loop;
+				QTimer::singleShot (5, &loop, SLOT (quit ()));
+				loop.exec ();
+			}
+			
+			libvlc_media_player_stop (NativePlayer_);
+		}
+	}
+	
+	void PlaylistWidget::clearPlaylist ()
+	{
+		while (libvlc_media_list_count (Playlist_))
+			DeleteRequested (0);
+	}
+	
+	void PlaylistWidget::next()
+	{
+		libvlc_media_list_player_next (Player_);
+	}
+	
+	void PlaylistWidget::prev()
+	{
+		libvlc_media_list_player_previous (Player_);
+	}
+}
+}
diff --git a/src/plugins/vlc/playlistwidget.h b/src/plugins/vlc/playlistwidget.h
new file mode 100644
index 0000000..3cd7b4d
--- /dev/null
+++ b/src/plugins/vlc/playlistwidget.h
@@ -0,0 +1,94 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#pragma once
+
+#include <QWidget>
+#include <QUrl>
+#include <QTreeView>
+
+struct libvlc_media_player_t;
+struct libvlc_media_list_player_t;
+struct libvlc_instance_t;
+struct libvlc_media_list_t;
+struct libvlc_media_t;
+
+class QAction;
+class QStandardItem;
+class QStringList;
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	class PlaylistModel;
+	
+	class PlaylistWidget : public QTreeView
+	{
+		Q_OBJECT
+		
+		libvlc_media_list_player_t *Player_;
+		libvlc_media_list_t *Playlist_;
+		libvlc_media_player_t *NativePlayer_;
+		libvlc_instance_t *Instance_;
+		
+		QStandardItem *LastPlayingItem_;
+		PlaylistModel *Model_;
+		const QIcon PlayIcon_;
+	
+	public:
+		explicit PlaylistWidget (QIcon playIcon, QWidget *parent = 0);
+		~PlaylistWidget ();
+		
+		void SetCurrentMedia (int);
+		void AddUrl (const QUrl&, bool start);
+		bool IsPlaying () const;
+		void Init (libvlc_instance_t *instance, libvlc_media_player_t *player);
+		void DeleteRequested (int index);
+		
+	protected:
+		void mouseDoubleClickEvent (QMouseEvent*);
+		void resizeEvent (QResizeEvent*);
+		
+	public slots:
+		void clearPlaylist ();
+		void next ();
+		void prev ();
+		
+	private slots:
+		void togglePlay ();
+		void updateInterface ();
+		void createMenu (QPoint);
+		void deleteRequested (QAction*);
+		
+	signals:
+		void savePlaylist (QStringList);
+	};
+}
+}
diff --git a/src/plugins/vlc/signalledwidget.cpp b/src/plugins/vlc/signalledwidget.cpp
index a2db8e2..ec0cda9 100644
--- a/src/plugins/vlc/signalledwidget.cpp
+++ b/src/plugins/vlc/signalledwidget.cpp
@@ -107,8 +107,18 @@ namespace vlc
 	}
 	
 	void SignalledWidget::showEvent (QShowEvent *event)
-	{	
+	{
 		emit shown (event);
 	}
+	
+	void SignalledWidget::dragEnterEvent (QDragEnterEvent *event)
+	{
+		emit dragEntered (event);
+	}
+
+	void SignalledWidget::dropEvent (QDropEvent *event)
+	{
+		emit dropped (event);
+	}
 }
 }
diff --git a/src/plugins/vlc/signalledwidget.h b/src/plugins/vlc/signalledwidget.h
index 27d28b0..0c72cc8 100644
--- a/src/plugins/vlc/signalledwidget.h
+++ b/src/plugins/vlc/signalledwidget.h
@@ -58,6 +58,8 @@ namespace vlc
 		void paintEvent (QPaintEvent*);
 		void resizeEvent (QResizeEvent*);
 		void showEvent (QShowEvent*);
+		void dragEnterEvent (QDragEnterEvent*);
+		void dropEvent (QDropEvent*);
 		
 	signals:
 		void mousePress (QMouseEvent*);
@@ -67,6 +69,8 @@ namespace vlc
 		void keyPress (QKeyEvent*);
 		void resized (QResizeEvent*);
 		void shown (QShowEvent*);
+		void dragEntered (QDragEnterEvent*);
+		void dropped (QDropEvent*);
 	};
 }
 }
diff --git a/src/plugins/vlc/vlc.cpp b/src/plugins/vlc/vlc.cpp
index e12a951..b114b74 100644
--- a/src/plugins/vlc/vlc.cpp
+++ b/src/plugins/vlc/vlc.cpp
@@ -40,43 +40,88 @@ namespace vlc
 	void Plugin::Init (ICoreProxy_ptr proxy)
 	{
 		Proxy_ = proxy;
+		
+		XmlSettingsDialog_.reset (new Util::XmlSettingsDialog ());
+		XmlSettingsDialog_->RegisterObject (&XmlSettingsManager::Instance (), "vlcsettings.xml");
+
+		
 		Manager_ = new Util::ShortcutManager (proxy);
 		Manager_->SetObject (this);
 		
 		Manager_->RegisterActionInfo ("org.vlc.navigate_left", 
-									ActionInfo (tr ("Key for navigate left in DVD menu"), 
+									ActionInfo (tr ("Navigate left in DVD menu"), 
 									QKeySequence (Qt::Key_Left), 
 									Proxy_->GetIcon ("arrow-left")));
 		
 		Manager_->RegisterActionInfo ("org.vlc.navigate_right",
-									ActionInfo (tr ("Key for navigate right in DVD menu"), 
+									ActionInfo (tr ("Navigate right in DVD menu"), 
 									QKeySequence (Qt::Key_Right), 
 									Proxy_->GetIcon ("arrow-right")));
 		
 		Manager_->RegisterActionInfo ("org.vlc.navigate_up",
-									ActionInfo (tr ("Key for navigate up in DVD menu"), 
+									ActionInfo (tr ("Navigate up in DVD menu"), 
 									QKeySequence (Qt::Key_Up),
 									Proxy_->GetIcon ("arrow-up")));
 		
 		Manager_->RegisterActionInfo ("org.vlc.navigate_down",
-									ActionInfo (tr ("Key for navigate down in DVD menu"), 
+									ActionInfo (tr ("Navigate down in DVD menu"), 
 									QKeySequence (Qt::Key_Down),
 									Proxy_->GetIcon ("arrow-down")));
 		
 		Manager_->RegisterActionInfo ("org.vlc.navigate_enter",
-									ActionInfo (tr ("Key for activate current in DVD menu"), 
+									ActionInfo (tr ("Activate current in DVD menu"), 
 									QKeySequence (Qt::Key_Enter), 
 									Proxy_->GetIcon ("key-enter")));
 		
 		Manager_->RegisterActionInfo ("org.vlc.toggle_fullscreen",
-									ActionInfo (tr ("Key for toggle fullscreen"),
+									ActionInfo (tr ("Toggle fullscreen"),
 									QKeySequence (Qt::Key_F),
 									Proxy_->GetIcon ("view-fullscreen")));
 		
 		Manager_->RegisterActionInfo ("org.vlc.toggle_play",
-									ActionInfo (tr ("Key for switch play/pause"),
+									ActionInfo (tr ("Switch play/pause"),
 									QKeySequence (Qt::Key_Space),
 									Proxy_->GetIcon ("media-playback-start")));
+		
+		Manager_->RegisterActionInfo ("org.vlc.volume_increase",
+									ActionInfo (tr ("Increase volume"),
+									QKeySequence (Qt::Key_Plus),
+									Proxy_->GetIcon ("audio-volume-high")));
+		
+		Manager_->RegisterActionInfo ("org.vlc.volume_decrease",
+									ActionInfo (tr ("Decrease volume"),
+									QKeySequence (Qt::Key_Minus),
+									Proxy_->GetIcon ("audio-volume-low")));
+		
+		Manager_->RegisterActionInfo ("org.vlc.plus_3_percent",
+									ActionInfo (tr ("3% seek forward"),
+									QKeySequence (Qt::Key_Asterisk),
+									QIcon ()));
+		
+		Manager_->RegisterActionInfo ("org.vlc.minus_3_percent",
+									ActionInfo (tr ("3% seek backward"),
+									QKeySequence (Qt::Key_Slash),
+									QIcon ()));
+		
+		Manager_->RegisterActionInfo ("org.vlc.plus_10_seconds",
+									ActionInfo (tr ("10 seconds seek forward"),
+									QKeySequence (Qt::Key_0),
+									QIcon ()));
+
+		Manager_->RegisterActionInfo ("org.vlc.minus_10_seconds",
+									ActionInfo (tr ("10 seconds seek backward"),
+									QKeySequence (Qt::Key_9),
+									QIcon ()));
+		
+		Manager_->RegisterActionInfo ("org.vlc.next",
+									ActionInfo (tr ("Next in playlist"),
+									QKeySequence (Qt::Key_R),
+									QIcon ()));
+		
+		Manager_->RegisterActionInfo ("org.vlc.prev",
+									ActionInfo (tr ("Prev in playlist"),
+									QKeySequence (Qt::Key_T),
+									QIcon ()));
 	}
 
 	void Plugin::SecondInit ()
@@ -90,6 +135,8 @@ namespace vlc
 
 	void Plugin::Release ()
 	{
+		for (int i = 0; i < Tabs_.size (); i++)
+			delete Tabs_ [i];
 	}
 
 	QString Plugin::GetName () const
@@ -109,13 +156,20 @@ namespace vlc
 	
 	void Plugin::TabOpenRequested (const QByteArray& tabClass) 
 	{
-		VlcWidget *widget = new VlcWidget (Manager_);
+		VlcWidget *widget = new VlcWidget (Proxy_, Manager_);
+		XmlSettingsManager::Instance ().RegisterObject ("Autostart", widget, "autostartChanged");
+		Tabs_ << widget;
 		emit addNewTab ("VLC", widget);
 		emit raiseTab (widget);
 		connect (widget, 
 				SIGNAL (deleteMe (QWidget*)), 
 				this, 
 				SIGNAL (removeTab (QWidget*)));
+		
+		connect (widget,
+				SIGNAL (deleteMe (QWidget*)),
+				this,
+				SLOT (deleteDeleted (QWidget*)));
 	}
 	
 	LeechCraft::TabClasses_t Plugin::GetTabClasses () const 
@@ -132,6 +186,21 @@ namespace vlc
 	{
 		Manager_->SetShortcut (id, shortcuts);
 	}
+	
+	void Plugin::deleteDeleted (QWidget *widget)
+	{
+		for (QVector <VlcWidget*>::iterator i = Tabs_.begin (); i != Tabs_.end (); i++)
+			if (*i == widget)
+			{
+				Tabs_.erase (i);
+				return;
+			}
+	}
+	
+	Util::XmlSettingsDialog_ptr Plugin::GetSettingsDialog () const
+	{
+		return XmlSettingsDialog_;
+	}
 }
 }
 
diff --git a/src/plugins/vlc/vlc.h b/src/plugins/vlc/vlc.h
index 9e8884c..1c0c029 100644
--- a/src/plugins/vlc/vlc.h
+++ b/src/plugins/vlc/vlc.h
@@ -34,7 +34,10 @@
 #include <interfaces/iinfo.h>
 #include <interfaces/ihavetabs.h>
 #include <interfaces/ihaveshortcuts.h>
+#include <interfaces/ihavesettings.h>
+#include <xmlsettingsdialog/xmlsettingsdialog.h>
 #include "vlcwidget.h"
+#include "xmlsettingsmanager.h"
 
 namespace LeechCraft
 {
@@ -44,12 +47,15 @@ namespace vlc
 				 , public IInfo
 				 , public IHaveTabs
 				 , public IHaveShortcuts
+				 , public IHaveSettings
 	{
 		Q_OBJECT
-		Q_INTERFACES (IInfo IHaveTabs IHaveShortcuts)
+		Q_INTERFACES (IInfo IHaveTabs IHaveShortcuts IHaveSettings)
 	
 		ICoreProxy_ptr Proxy_;
 		Util::ShortcutManager *Manager_;
+		QVector<VlcWidget*> Tabs_;
+		Util::XmlSettingsDialog_ptr XmlSettingsDialog_;
 	
 	public:
 		void Init (ICoreProxy_ptr);
@@ -59,7 +65,8 @@ namespace vlc
 		QString GetName () const;
 		QString GetInfo () const;
 		QIcon GetIcon () const;
-
+		Util::XmlSettingsDialog_ptr GetSettingsDialog () const;
+		
 		void TabOpenRequested (const QByteArray&);
 		LeechCraft::TabClasses_t GetTabClasses () const;
 		
@@ -73,6 +80,9 @@ namespace vlc
 		void changeTabIcon (QWidget*, const QIcon&);
 		void statusBarChanged (QWidget*, const QString&);
 		void raiseTab (QWidget*);
+		
+	private slots:
+		void deleteDeleted (QWidget*);
 	};
 }
 }
diff --git a/src/plugins/vlc/vlcplayer.cpp b/src/plugins/vlc/vlcplayer.cpp
index 295cfef..894c269 100644
--- a/src/plugins/vlc/vlcplayer.cpp
+++ b/src/plugins/vlc/vlcplayer.cpp
@@ -37,6 +37,7 @@
 #include <QSizePolicy>
 #include <QEventLoop>
 #include <QTimeLine>
+#include <QDir>
 #include <QDebug>
 #include "vlcplayer.h"
 
@@ -78,6 +79,12 @@ namespace vlc
 		libvlc_media_player_set_xwindow (Mp_.get (), parent->winId ());
 	}
 	
+	void VlcPlayer::Init (QWidget *parent)
+	{
+		libvlc_media_player_set_xwindow (Mp_.get (), parent->winId ());
+		Parent_ = parent;
+	}
+	
 	void VlcPlayer::setUrl (const QUrl& url) 
 	{
 		Subtitles_.clear ();
@@ -88,14 +95,13 @@ namespace vlc
 		
 		libvlc_media_player_set_media (Mp_.get (), M_.get ());
 		libvlc_media_player_play (Mp_.get ());
-		
-		LastMedia_ = url;
 	}
 	
 	void VlcPlayer::addUrl (const QUrl& url)
 	{
+		const QUrl &lastMedia = QUrl::fromEncoded (libvlc_media_get_meta (libvlc_media_player_get_media (Mp_.get ()), libvlc_meta_URL));
 		Freeze ();
-		M_.reset (libvlc_media_new_location (VlcInstance_.get (), LastMedia_.toEncoded ()), libvlc_media_release);
+		M_.reset (libvlc_media_new_location (VlcInstance_.get (), lastMedia.toEncoded ()), libvlc_media_release);
 		libvlc_media_add_option (M_.get (), ":input-slave=" + url.toEncoded ());
 		libvlc_media_player_set_media (Mp_.get (), M_.get ());
 		UnFreeze ();		
@@ -156,6 +162,7 @@ namespace vlc
 	
 	void VlcPlayer::Freeze ()
 	{
+		emit unstable ();
 		FreezePlayingMedia_ = libvlc_media_player_get_media (Mp_.get ());
 		if (FreezePlayingMedia_) 
 		{
@@ -199,6 +206,7 @@ namespace vlc
 			libvlc_media_player_pause (Mp_.get ());
 		
 		ReloadSubtitles ();
+		emit stable ();
 	}
 	
 	void VlcPlayer::ReloadSubtitles ()
@@ -250,9 +258,8 @@ namespace vlc
 		return libvlc_video_get_spu_count (Mp_.get ());
 	}
 	
-	void VlcPlayer::AddSubtitles (const QString &file)
+	void VlcPlayer::AddSubtitles (const QString& file)
 	{
-		qWarning () << Q_FUNC_INFO << file;
 		libvlc_video_set_subtitle_file (Mp_.get (), file.toUtf8 ());
 		Subtitles_ << file;
 	}
@@ -342,10 +349,36 @@ namespace vlc
 			if (line.currentTime () > MAX_TIMEOUT)
 			{
 				qWarning () << Q_FUNC_INFO << "timeout";
+				break;
 			}
 		}
 		
 		WaitForPlaying ();
 	}
+	
+	libvlc_instance_t* VlcPlayer::GetInstance () const
+	{
+		return VlcInstance_.get ();
+	}
+	
+	void VlcPlayer::plus3percent ()
+	{
+		libvlc_media_player_set_time (Mp_.get (), libvlc_media_player_get_time (Mp_.get ()) + libvlc_media_player_get_length (Mp_.get ()) * 0.03);
+	}
+	
+	void VlcPlayer::minus3percent ()
+	{
+		libvlc_media_player_set_time (Mp_.get (), libvlc_media_player_get_time (Mp_.get ()) - libvlc_media_player_get_length (Mp_.get ()) * 0.03);
+	}
+
+	void VlcPlayer::plus10seconds ()
+	{
+		libvlc_media_player_set_time (Mp_.get (), libvlc_media_player_get_time (Mp_.get ()) + 10 * 1000);
+	}
+	
+	void VlcPlayer::minus10seconds ()
+	{
+		libvlc_media_player_set_time (Mp_.get (), libvlc_media_player_get_time (Mp_.get ()) - 10 * 1000);
+	}
 }
 }
diff --git a/src/plugins/vlc/vlcplayer.h b/src/plugins/vlc/vlcplayer.h
index 0f1b722..9c32cf7 100644
--- a/src/plugins/vlc/vlcplayer.h
+++ b/src/plugins/vlc/vlcplayer.h
@@ -58,7 +58,6 @@ namespace vlc
 		QWidget *Parent_;
 		bool DVD_;
 		
-		QUrl LastMedia_;
 		QStringList Subtitles_;
 		
 		libvlc_time_t FreezeCur_;
@@ -76,6 +75,8 @@ namespace vlc
 		double GetPosition () const;
 		QWidget* GetParent () const;
 		
+		void Init (QWidget *parent);
+		
 		int GetAudioTracksNumber () const;
 		int GetCurrentAudioTrack () const;
 		QString GetAudioTrackDescription (int) const;
@@ -89,6 +90,7 @@ namespace vlc
 		void DVDNavigate (unsigned);
 		
 		std::shared_ptr<libvlc_media_player_t> GetPlayer () const;
+		libvlc_instance_t* GetInstance () const;
 		
 		QTime GetCurrentTime () const;
 		QTime GetFullTime () const;
@@ -117,6 +119,15 @@ namespace vlc
 		void dvdNavigateUp ();
 		void dvdNavigateDown ();
 		void dvdNavigateEnter ();
+		
+		void minus10seconds ();
+		void plus10seconds ();
+		void plus3percent ();
+		void minus3percent ();
+		
+	signals:
+		void unstable ();
+		void stable ();
 	};
 }
 }
diff --git a/src/plugins/vlc/vlcscrollbar.cpp b/src/plugins/vlc/vlcscrollbar.cpp
index 72259d4..918b51b 100644
--- a/src/plugins/vlc/vlcscrollbar.cpp
+++ b/src/plugins/vlc/vlcscrollbar.cpp
@@ -41,6 +41,7 @@ namespace vlc
 	VlcScrollBar::VlcScrollBar (QWidget *parent)
 	: QWidget (parent)
 	, CurrentPosition_ (0)
+	, blocked (false)
 	{
 	}
 
@@ -73,7 +74,18 @@ namespace vlc
 	
 	void VlcScrollBar::setPosition (double pos)
 	{
-		CurrentPosition_ = pos;
+		if (!blocked)
+			CurrentPosition_ = pos;
+	}
+	
+	void VlcScrollBar::blockUpdating ()
+	{
+		blocked = true;
+	}
+	
+	void VlcScrollBar::unBlockUpdating ()
+	{
+		blocked = false;
 	}
 }
 }
diff --git a/src/plugins/vlc/vlcscrollbar.h b/src/plugins/vlc/vlcscrollbar.h
index 2c612ec..8c3798a 100644
--- a/src/plugins/vlc/vlcscrollbar.h
+++ b/src/plugins/vlc/vlcscrollbar.h
@@ -43,6 +43,7 @@ namespace vlc
 		
 		double CurrentPosition_;
 		QPoint LastMousePoint_;
+		bool blocked;
 		
 	public:
 		explicit VlcScrollBar (QWidget *parent = 0);
@@ -54,6 +55,9 @@ namespace vlc
 
 	public slots:	
 		void setPosition (double);
+		void blockUpdating ();
+		void unBlockUpdating ();
+		
 	signals:
 		void changePosition (double);
 	};
diff --git a/src/plugins/vlc/vlcsettings.xml b/src/plugins/vlc/vlcsettings.xml
new file mode 100644
index 0000000..f4ab99c
--- /dev/null
+++ b/src/plugins/vlc/vlcsettings.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<settings>
+	<page>
+		<label lang="en" value="Local settings" />
+		<item type="checkbox" property="Autostart" default="true">
+			<label lang="en" value="Auto start when adding files" />
+		</item>
+	</page>
+</settings>
diff --git a/src/plugins/vlc/vlcwidget.cpp b/src/plugins/vlc/vlcwidget.cpp
index ca1e29a..63a1a2b 100644
--- a/src/plugins/vlc/vlcwidget.cpp
+++ b/src/plugins/vlc/vlcwidget.cpp
@@ -52,9 +52,20 @@
 #include <QResizeEvent>
 #include <QCursor>
 #include <QDropEvent>
+#include <QCoreApplication>
+#include <QDockWidget>
+#include <QSettings>
+#include <QStringList>
 #include <util/shortcuts/shortcutmanager.h>
+#include <util/util.h>
+#include <interfaces/ientityhandler.h>
+#include <interfaces/core/ientitymanager.h>
+#include <interfaces/core/irootwindowsmanager.h>
+#include <interfaces/imwproxy.h>
 #include "vlcwidget.h"
 #include "vlcplayer.h"
+#include "playlisttitlewidget.h"
+#include "xmlsettingsmanager.h"
 
 namespace
 {
@@ -62,30 +73,61 @@ namespace
 	{
 		return (a - b).manhattanLength ();
 	}
+	
+	const QStringList Known_Audio_File_Formats = { ".ac3", ".mp3", ".ogg", ".flac", ".aac" };
+	const QStringList Known_Subtitles_File_Formats = { ".srt", ".smi", ".ssa", ".ass" };
 }
 
 namespace LeechCraft
 {
 namespace vlc
 {
-	const int PANEL_SIDE_MARGIN = 5;
-	const int PANEL_BOTTOM_MARGIN = 5;
-	const int PANEL_HEIGHT = 27;
+	const int Panel_Side_Margin = 5;
+	const int Panel_Bottom_Margin = 5;
+	const int Panel_Height = 27;
 	
-	VlcWidget::VlcWidget (Util::ShortcutManager *manager, QWidget *parent)
+	VlcWidget::VlcWidget (ICoreProxy_ptr proxy, Util::ShortcutManager *manager, QWidget *parent)
 	: QWidget (parent)
 	, Parent_ (parent)
 	, Manager_ (manager)
 	, AllowFullScreenPanel_ (false)
+	, Autostart_ (true)
+	, Proxy_ (proxy)
 	{
 		VlcMainWidget_ = new SignalledWidget;
 		VlcMainWidget_->SetBackGroundColor (new QColor ("black"));
+		PlaylistWidget_ = new PlaylistWidget (proxy->GetIcon ("media-playback-start"));
+		
 		QVBoxLayout *layout = new QVBoxLayout;
-		layout->setContentsMargins (0, 0, 0, 0);
-		layout->addWidget (VlcMainWidget_);
+		layout->addWidget(VlcMainWidget_);
 		setLayout (layout);
+		
+		PlaylistDock_ = new QDockWidget (this);
+		PlaylistDock_->setFeatures (QDockWidget::DockWidgetMovable | QDockWidget::DockWidgetClosable);
+		PlaylistDock_->setAllowedAreas (Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
+		TitleWidget_ = new PlaylistTitleWidget (proxy, this);
+		PlaylistDock_->setTitleBarWidget (TitleWidget_);
+		
+		auto mw = proxy->GetRootWindowsManager ()->GetMWProxy (0);
+		mw->AddDockWidget (Qt::LeftDockWidgetArea, PlaylistDock_);
+		mw->AssociateDockWidget (PlaylistDock_, this);
+		mw->ToggleViewActionVisiblity (PlaylistDock_, false);
+		
+		PlaylistDock_->setWidget (PlaylistWidget_);
+		
 		VlcPlayer_ = new VlcPlayer (VlcMainWidget_);
-
+		
+		QSizePolicy pol (QSizePolicy::Expanding, QSizePolicy::Expanding);
+		pol.setHorizontalStretch (255);
+		pol.setVerticalStretch (255);
+		VlcMainWidget_->setSizePolicy (pol);
+		
+		PlaylistWidget_->Init (VlcPlayer_->GetInstance (), VlcPlayer_->GetPlayer ().get ());
+		VlcPlayer_->Init (VlcMainWidget_);
+		
+		DisableScreenSaver_ = new QTimer (this);
+		DisableScreenSaver_->setInterval (9000);
+		
 		GenerateToolBar ();
 		PrepareFullScreen ();
 		InterfaceUpdater_ = new QTimer (this);
@@ -122,11 +164,11 @@ namespace vlc
 		connect (Open_,
 				SIGNAL (triggered ()),
 				this,
-				SLOT (addFile ()));
+				SLOT (addFiles ()));
 		
 		connect (TogglePlay_,
 				SIGNAL (triggered ()),
-				VlcPlayer_,
+				PlaylistWidget_,
 				SLOT(togglePlay ()));
 		
 		connect (Stop_,
@@ -139,18 +181,83 @@ namespace vlc
 				this,
 				SLOT (toggleFullScreen ()));
 		
+		connect (DisableScreenSaver_,
+				SIGNAL (timeout ()),
+				this,
+				SLOT (disableScreenSaver ()));
+		
+		connect (PlaylistWidget_,
+				SIGNAL (savePlaylist (QStringList)),
+				this,
+				SLOT (savePlaylist (QStringList)));
+		
+		connect (VlcPlayer_,
+				SIGNAL (stable ()),
+				ScrollBar_,
+				SLOT (unBlockUpdating ()));
+		
+		connect (VlcPlayer_,
+				SIGNAL (unstable ()),
+				ScrollBar_,
+				SLOT (blockUpdating ()));
+		
+		connect (TitleWidget_->AddAction_,
+				SIGNAL (triggered ()),
+				this,
+				SLOT (addFilesWithoutClearingPlaylist ()));
+		
+		connect (TitleWidget_->ClearAction_,
+				SIGNAL (triggered ()),
+				PlaylistWidget_,
+				SLOT (clearPlaylist ()));
+		
 		InitNavigations ();
+		InitVolumeActions ();
+		InitRewindActions ();
 		setAcceptDrops (true);
+		RestoreSettings ();
 	}
 	
-	VlcWidget::~VlcWidget()
+	VlcWidget::~VlcWidget ()
 	{
 		VlcPlayer_->stop ();
+		disableScreenSaver ();
+		delete PlaylistWidget_;
+		delete PlaylistDock_;
 		delete VlcPlayer_;
+		SaveSettings ();
 		emit deleteMe (this);
 	}
+	
+	void VlcWidget::RestoreSettings ()
+	{
+		Settings_ = new QSettings (QCoreApplication::organizationName (), QCoreApplication::applicationName () + "_VLC");
+		RestorePlaylist ();
+	}
+	
+	void VlcWidget::SaveSettings ()
+	{
+		delete Settings_;
+	}
+	
+	void VlcWidget::savePlaylist (const QStringList& list)
+	{
+		qDebug () << list;
+		Settings_->setValue ("Playlist", list);
+	}
 
-
+	void VlcWidget::RestorePlaylist ()
+	{
+		QStringList playlist = Settings_->value ("Playlist").toStringList ();
+		if (playlist.size () < 2)
+			return;
+		
+		for (int i = 0; i < playlist.size () - 1; i++)
+			PlaylistWidget_->AddUrl (QUrl::fromEncoded (playlist [i].toUtf8 ()), false);
+		
+		PlaylistWidget_->SetCurrentMedia (playlist [playlist.size () - 1].toInt ());
+	}
+	
 	QObject* VlcWidget::ParentMultiTabs ()
 	{
 		return Parent_;
@@ -166,13 +273,28 @@ namespace vlc
 		deleteLater ();
 	}
 	
-	void VlcWidget::addFile ()
+	void VlcWidget::addFiles ()
 	{
-		QString file = QFileDialog::getOpenFileName (this,
-													tr ("Open file"),
+		QStringList files = QFileDialog::getOpenFileNames (this,
+													tr ("Open files"),
+													tr ("Videos (*.mkv *.avi *.mov *.mpg)"));
+		
+		PlaylistWidget_->clearPlaylist ();
+		for (int i = 0; i < files.size (); i++)
+			if (QFile::exists (files [i]))
+				PlaylistWidget_->AddUrl (QUrl::fromLocalFile (files [i]), Autostart_);
+	}
+	
+	void VlcWidget::addFilesWithoutClearingPlaylist ()
+	{
+		QStringList files = QFileDialog::getOpenFileNames (this,
+													tr ("Open files"),
 													tr ("Videos (*.mkv *.avi *.mov *.mpg)"));
-		if (QFile::exists (file))
-			VlcPlayer_->setUrl (QUrl::fromLocalFile (file));
+		
+		for (int i = 0; i < files.size (); i++)
+			if (QFile::exists (files [i]))
+				PlaylistWidget_->AddUrl (QUrl::fromLocalFile (files [i]), Autostart_);
+
 	}
 	
 	void VlcWidget::addFolder () 
@@ -182,7 +304,10 @@ namespace vlc
 													tr ("Folder with video"));
 		
 		if (QFile::exists (folder))
-			VlcPlayer_->setUrl (QUrl ("directory://" + folder));
+		{
+			PlaylistWidget_->clearPlaylist ();
+			PlaylistWidget_->AddUrl (QUrl ("directory://" + folder), Autostart_);
+		}
 	}
 	
 	void VlcWidget::addSimpleDVD ()
@@ -191,8 +316,11 @@ namespace vlc
 													tr ("Open DVD"),
 													tr ("Root of DVD directory"));
 		
-		if (QFile::exists (folder)) 
-			VlcPlayer_->setUrl (QUrl ("dvdsimple://" + folder));
+		if (QFile::exists (folder))
+		{
+			PlaylistWidget_->clearPlaylist ();
+			PlaylistWidget_->AddUrl (QUrl ("dvdsimple://" + folder), Autostart_);
+		}
 	}
 	
 	void VlcWidget::addDVD ()
@@ -202,7 +330,10 @@ namespace vlc
 													tr ("Root of DVD directory"));
 		
 		if (QFile::exists (folder))
-			VlcPlayer_->setUrl (QUrl ("dvd://" + folder));
+		{
+			PlaylistWidget_->clearPlaylist ();
+			PlaylistWidget_->AddUrl (QUrl ("dvd://" + folder), Autostart_);
+		}
 	}
 
 	void VlcWidget::addUrl ()
@@ -210,7 +341,10 @@ namespace vlc
 		QString url = QInputDialog::getText (this, tr ("Open URL"), tr ("Enter URL"));
 		
 		if (!url.isEmpty ())
-			VlcPlayer_->setUrl (QUrl (url));
+		{
+			PlaylistWidget_->clearPlaylist ();
+			PlaylistWidget_->AddUrl (QUrl (url), Autostart_);
+		}
 	}
 	
 	void VlcWidget::addSlave ()
@@ -245,10 +379,10 @@ namespace vlc
 			
 			if (FullScreenPanel_->isVisible ()) 
 			{
-				if (QCursor::pos ().x () > PANEL_SIDE_MARGIN && 
-					QCursor::pos ().x () < FullScreenWidget_->width () - PANEL_SIDE_MARGIN &&
-					QCursor::pos ().y () < FullScreenWidget_->height () - PANEL_BOTTOM_MARGIN && 
-					QCursor::pos ().y () > FullScreenWidget_->height () - PANEL_BOTTOM_MARGIN - PANEL_HEIGHT)
+				if (QCursor::pos ().x () > Panel_Side_Margin && 
+					QCursor::pos ().x () < FullScreenWidget_->width () - Panel_Side_Margin &&
+					QCursor::pos ().y () < FullScreenWidget_->height () - Panel_Bottom_Margin && 
+					QCursor::pos ().y () > FullScreenWidget_->height () - Panel_Bottom_Margin - Panel_Height)
 				{
 					fullScreenPanelRequested ();
 					FullScreenPanel_->setWindowOpacity (0.8);
@@ -329,7 +463,6 @@ namespace vlc
 			AllowFullScreenPanel_ = true;
 			FullScreenWidget_->SetBackGroundColor (new QColor ("black"));
 			FullScreenWidget_->showFullScreen ();
-// 			FullScreenWidget_->show ();
 			VlcPlayer_->switchWidget (FullScreenWidget_);
 		} 
 		else 
@@ -346,18 +479,39 @@ namespace vlc
 	{
 		Bar_ = new QToolBar (this);
 		OpenButton_ = new QToolButton (Bar_);
-		OpenButton_->setMenu (GenerateMenuForOpenAction ());
-		OpenButton_->setPopupMode (QToolButton::MenuButtonPopup);
 		Open_ = new QAction (OpenButton_);
 		Open_->setProperty ("ActionIcon", "folder");
+		OpenButton_->setMenu (GenerateMenuForOpenAction ());
+		OpenButton_->setPopupMode (QToolButton::MenuButtonPopup);
 		OpenButton_->setDefaultAction (Open_);
 		Bar_->addWidget (OpenButton_);
+		
+		Prev_ = Bar_->addAction (tr ("Prev"));
+		Prev_->setProperty ("ActionIcon", "media-seek-backward");
+		Manager_->RegisterAction ("org.vlc.prev", Prev_, true);
+		
+		connect (Prev_,
+				SIGNAL (triggered ()),
+				PlaylistWidget_,
+				SLOT (prev ()));
+		
 		TogglePlay_ = Bar_->addAction (tr ("Play"));
 		Manager_->RegisterAction ("org.vlc.toggle_play", TogglePlay_, true);
 		TogglePlay_->setProperty ("ActionIcon", "media-playback-start");
 		TogglePlay_->setProperty ("WatchActionIconChange", true);
+		
 		Stop_ = Bar_->addAction (tr ("Stop"));
 		Stop_->setProperty ("ActionIcon", "media-playback-stop");
+		
+		Next_ = Bar_->addAction (tr ("Next"));
+		Next_->setProperty ("ActionIcon", "media-seek-forward");
+		Manager_->RegisterAction ("org.vlc.next", Next_, true);
+		
+		connect (Next_,
+				SIGNAL (triggered ()),
+				PlaylistWidget_,
+				SLOT (next ()));
+		
 		FullScreenAction_ = Bar_->addAction (tr ("FullScreen"));
 		FullScreenAction_->setProperty ("ActionIcon", "view-fullscreen");
 		Manager_->RegisterAction ("org.vlc.toggle_fullscreen", FullScreenAction_, true);
@@ -408,11 +562,13 @@ namespace vlc
 	void VlcWidget::TabLostCurrent ()
 	{
 		InterfaceUpdater_->stop ();
+		DisableScreenSaver_->stop ();
 	}
 	
 	void VlcWidget::TabMadeCurrent ()
 	{
 		InterfaceUpdater_->start ();
+		DisableScreenSaver_->start ();
 	}
 	
 	void VlcWidget::ForbidFullScreen ()
@@ -539,6 +695,8 @@ namespace vlc
 		FullScreenWidget_ = new SignalledWidget;
 		FullScreenWidget_->addAction (TogglePlay_);
 		FullScreenWidget_->addAction (FullScreenAction_);
+		FullScreenWidget_->addAction (Next_);
+		FullScreenWidget_->addAction (Prev_);
 		FullScreenPanel_ = new SignalledWidget (this, Qt::ToolTip);
 		QHBoxLayout *panelLayout = new QHBoxLayout;
 		FullScreenTimeLeft_ = new QLabel;
@@ -559,9 +717,14 @@ namespace vlc
 		FullScreenButton_ = new QToolButton;
 		FullScreenButton_->setDefaultAction (FullScreenAction_);
 		FullScreenButton_->setAutoRaise (true);
+		NextButton_ = new QToolButton;
+		NextButton_->setDefaultAction (Next_);
+		NextButton_->setAutoRaise (true);
 		
+		panelLayout->addWidget (PrevButton_);
 		panelLayout->addWidget (TogglePlayButton_);
 		panelLayout->addWidget (StopButton_);
+		panelLayout->addWidget (NextButton_);
 		panelLayout->addWidget (FullScreenButton_);
 		panelLayout->addWidget (FullScreenTimeLeft_);
 		panelLayout->addWidget (FullScreenVlcScrollBar_);
@@ -619,8 +782,8 @@ namespace vlc
 		if (!AllowFullScreenPanel_ || !FullScreenWidget_->isVisible ())
 			return;
 		
-		FullScreenPanel_->setGeometry (PANEL_SIDE_MARGIN, FullScreenWidget_->height () - PANEL_BOTTOM_MARGIN - PANEL_HEIGHT, 
-									   FullScreenWidget_->width () - PANEL_SIDE_MARGIN * 2, PANEL_HEIGHT);
+		FullScreenPanel_->setGeometry (Panel_Side_Margin, FullScreenWidget_->height () - Panel_Bottom_Margin - Panel_Height, 
+									   FullScreenWidget_->width () - Panel_Side_Margin * 2, Panel_Height);
 		if (!FullScreenPanel_->isVisible ())
 			FullScreenPanel_->show ();
 		else
@@ -651,6 +814,12 @@ namespace vlc
 	QMenu* VlcWidget::GenerateMenuForOpenAction ()
 	{
 		QMenu *result = new QMenu;
+		
+		connect (result->addAction (tr ("Open file")),
+				SIGNAL (triggered ()),
+				this,
+				SLOT (addFiles ()));
+		
 		connect (result->addAction (tr ("Open folder")),
 				SIGNAL (triggered ()),
 				this,
@@ -726,16 +895,90 @@ namespace vlc
 		FullScreenWidget_->addAction (NavigateUp_);
 	}
 	
+	void VlcWidget::InitVolumeActions()
+	{
+		IncreaseVolumeAction_ = new QAction (this);
+		DecreaseVolumeAction_ = new QAction (this);
+		
+		Manager_->RegisterAction ("org.vlc.volume_increase", IncreaseVolumeAction_, true);
+		Manager_->RegisterAction ("org.vlc.volume_decrease", DecreaseVolumeAction_, true);
+		
+		connect (IncreaseVolumeAction_,
+				SIGNAL (triggered ()),
+				SoundWidget_,
+				SLOT (increaseVolume ()));
+		
+		connect (DecreaseVolumeAction_,
+				SIGNAL (triggered ()),
+				SoundWidget_,
+				SLOT (decreaseVolume ()));
+		
+		addAction (IncreaseVolumeAction_);
+		addAction (DecreaseVolumeAction_);
+		
+		FullScreenWidget_->addAction (IncreaseVolumeAction_);
+		FullScreenWidget_->addAction (DecreaseVolumeAction_);
+	}
+	
+	void VlcWidget::InitRewindActions ()
+	{
+		Plus3Percent_ = new QAction (this);
+		Plus10Seconds_ = new QAction (this);
+		Minus3Percent_ = new QAction (this);
+		Minus10Seconds_ = new QAction (this);
+		
+		Next_ = new QAction (this);
+		Prev_ = new QAction (this);
+		
+		Manager_->RegisterAction ("org.vlc.plus_3_percent", Plus3Percent_, true);
+		Manager_->RegisterAction ("org.vlc.plus_10_seconds", Plus10Seconds_, true);
+		Manager_->RegisterAction ("org.vlc.minus_3_percent", Minus3Percent_, true);
+		Manager_->RegisterAction ("org.vlc.minus_10_seconds", Minus10Seconds_, true);
+		
+		connect (Plus10Seconds_,
+				SIGNAL (triggered ()),
+				VlcPlayer_,
+				SLOT (plus10seconds ()));
+		
+		connect (Minus10Seconds_,
+				SIGNAL (triggered ()),
+				VlcPlayer_,
+				SLOT (minus10seconds ()));
+		
+		connect (Plus3Percent_,
+				SIGNAL (triggered ()),
+				VlcPlayer_,
+				SLOT (plus3percent ()));
+		
+		connect (Minus3Percent_,
+				SIGNAL (triggered ()),
+				VlcPlayer_,
+				SLOT (minus3percent ()));
+		
+		addAction (Plus10Seconds_);
+		addAction (Plus3Percent_);
+		addAction (Minus10Seconds_);
+		addAction (Minus3Percent_);
+		
+		FullScreenWidget_->addAction (Plus10Seconds_);
+		FullScreenWidget_->addAction (Plus3Percent_);
+		FullScreenWidget_->addAction (Minus10Seconds_);
+		FullScreenWidget_->addAction (Minus3Percent_);
+	}
+	
 	void VlcWidget::dropEvent (QDropEvent *event)
 	{
 		QUrl main = event->mimeData ()->urls () [0];
 		event->accept ();
-		if (main.toString ().right (3) == "ac3")
+		if (Known_Audio_File_Formats.contains (main.toString ().right (4)))
 			VlcPlayer_->addUrl (main);
-		else if (main.toString ().right (3) == "srt")
+		else if (Known_Subtitles_File_Formats.contains (main.toString ().right (4)))
 			VlcPlayer_->AddSubtitles (main.toEncoded ());
 		else
-			VlcPlayer_->setUrl (main);
+		{
+			PlaylistWidget_->clearPlaylist ();
+			PlaylistWidget_->AddUrl (main, Autostart_);
+		}
 	}
 	
 	void VlcWidget::dragEnterEvent (QDragEnterEvent *event)
@@ -743,5 +986,19 @@ namespace vlc
 		if (event->mimeData ()->urls ().size () == 1)
 			event->accept ();
 	}
+	
+	void VlcWidget::disableScreenSaver ()
+	{
+		auto e = Util::MakeEntity ("ScreensaverProhibition", {}, {}, "x-leechcraft/power-management");
+		e.Additional_ ["ContextID"] = "org.vlc.VlcTab";
+		e.Additional_ ["Enable"] = libvlc_media_player_is_playing (VlcPlayer_->GetPlayer ().get ()); 
+		
+		Proxy_->GetEntityManager ()->HandleEntity (e);
+	}
+	
+	void VlcWidget::autostartChanged ()
+	{
+		Autostart_ = XmlSettingsManager::Instance ().property ("Autostart").toBool ();
+	}
 }
 }
diff --git a/src/plugins/vlc/vlcwidget.h b/src/plugins/vlc/vlcwidget.h
index addacac..5633153 100644
--- a/src/plugins/vlc/vlcwidget.h
+++ b/src/plugins/vlc/vlcwidget.h
@@ -32,9 +32,11 @@
 #include <QWidget>
 #include <QMap>
 #include <interfaces/ihavetabs.h>
+#include <interfaces/core/icoreproxy.h>
 #include "vlcscrollbar.h"
 #include "soundwidget.h"
 #include "signalledwidget.h"
+#include "playlistwidget.h"
 
 class QToolBar;
 class QMenu;
@@ -42,6 +44,9 @@ class QLabel;
 class QTimer;
 class QToolButton;
 class QResizeEvent;
+class QSettings;
+class QDockWidget;
+class QStringList;
 
 namespace LeechCraft
 {
@@ -53,21 +58,36 @@ namespace Util
 namespace vlc
 {
 	class VlcPlayer;
+	class PlaylistTitleWidget;
 	class VlcWidget : public QWidget
 					, public ITabWidget
 	{
 		Q_OBJECT
 		Q_INTERFACES (ITabWidget)
 		
+		ICoreProxy_ptr Proxy_;
 		QObject *const Parent_;
 		VlcPlayer *VlcPlayer_;
+		PlaylistWidget *PlaylistWidget_;
+		PlaylistTitleWidget *TitleWidget_;
 		QToolBar *Bar_;
 		QAction *Open_;
 		QToolButton *OpenButton_;
+		QToolButton *NextButton_;
+		QToolButton *PrevButton_;
 		QAction *TogglePlay_;
 		QAction *Stop_;
 		QAction *FullScreenAction_;
+		QAction *IncreaseVolumeAction_;
+		QAction *DecreaseVolumeAction_;
+		QAction *Plus3Percent_;
+		QAction *Minus3Percent_;
+		QAction *Plus10Seconds_;
+		QAction *Minus10Seconds_;
+		QAction *Next_;
+		QAction *Prev_;
 		QPoint LastMouseEvent_;
+		QDockWidget *PlaylistDock_;
 		Util::ShortcutManager * const Manager_;
 		
 		QAction *NavigateLeft_;
@@ -99,9 +119,14 @@ namespace vlc
 		SoundWidget *SoundWidget_;
 		SoundWidget *FullScreenSoundWidget_;
 		QMenu *ContextMenu_;
+		QSettings *Settings_;
+		
+		bool Autostart_;
+		
+		QTimer *DisableScreenSaver_;
 		
 	public:
-		explicit VlcWidget (Util::ShortcutManager *manager, QWidget *parent = 0);
+		explicit VlcWidget (ICoreProxy_ptr proxy, Util::ShortcutManager *manager, QWidget *parent = 0);
 		~VlcWidget();
 		TabClassInfo GetTabClassInfo () const;
 		QObject* ParentMultiTabs ();
@@ -118,10 +143,21 @@ namespace vlc
 		void PrepareFullScreen ();
 		void ForbidFullScreen ();
 		void ConnectWidgetToMe (SignalledWidget*);
+		
 		void InitNavigations ();
+		void InitVolumeActions ();
+		void InitRewindActions ();
+		
+		void SaveSettings ();
+		void RestoreSettings ();
+		void RestorePlaylist ();
+		
+	public slots:
+		void autostartChanged ();
 		
 	private slots:
-		void addFile ();
+		void addFiles ();
+		void addFilesWithoutClearingPlaylist ();
 		void addFolder ();
 		void addUrl ();
 		void addDVD ();
@@ -150,6 +186,10 @@ namespace vlc
 		void AllowPanel ();
 		void ForbidPanel ();
 		
+		void disableScreenSaver ();
+		
+		void savePlaylist (const QStringList&);
+		
 	signals:
 		void deleteMe (QWidget*);
 	};
diff --git a/src/plugins/vlc/xmlsettingsmanager.cpp b/src/plugins/vlc/xmlsettingsmanager.cpp
new file mode 100644
index 0000000..16cd501
--- /dev/null
+++ b/src/plugins/vlc/xmlsettingsmanager.cpp
@@ -0,0 +1,59 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2006-2013  Georg Rudoy
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#include "xmlsettingsmanager.h"
+#include <QCoreApplication>
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	XmlSettingsManager::XmlSettingsManager ()
+	{
+		LeechCraft::Util::BaseSettingsManager::Init ();
+	}
+
+	XmlSettingsManager& XmlSettingsManager::Instance ()
+	{
+		static XmlSettingsManager xsm;
+		return xsm;
+	}
+
+	QSettings* XmlSettingsManager::BeginSettings () const
+	{
+		QSettings *settings = new QSettings (QCoreApplication::organizationName (),
+				QCoreApplication::applicationName () + "_VLC");
+		return settings;
+	}
+
+	void XmlSettingsManager::EndSettings (QSettings*) const
+	{
+	}
+}
+}
diff --git a/src/plugins/vlc/xmlsettingsmanager.h b/src/plugins/vlc/xmlsettingsmanager.h
new file mode 100644
index 0000000..ebb195e
--- /dev/null
+++ b/src/plugins/vlc/xmlsettingsmanager.h
@@ -0,0 +1,49 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2006-2013  Georg Rudoy
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#pragma once
+
+#include <xmlsettingsdialog/basesettingsmanager.h>
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	class XmlSettingsManager : public LeechCraft::Util::BaseSettingsManager
+	{
+		Q_OBJECT
+		XmlSettingsManager ();
+	public:
+		static XmlSettingsManager& Instance ();
+	protected:
+		virtual QSettings* BeginSettings () const;
+		virtual void EndSettings (QSettings*) const;
+	};
+}
+}
