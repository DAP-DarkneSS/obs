diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 9554cc9..4698697 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -215,6 +215,7 @@ cmake_dependent_option (ENABLE_SHAITAN "Build Shaitan, Embedded terminal emulato
 cmake_dependent_option (ENABLE_SYSNOTIFY "Build Sysnotify for using D-Bus notification API" ${WITH_PLUGINS} "NOT WIN32" OFF)
 option (ENABLE_TOUCHSTREAMS "Build TouchStreams, VK.com music streaming plugin" ${WITH_PLUGINS})
 option (ENABLE_TPI "Build Task Progress Indicator quark plugin" ${WITH_PLUGINS})
+option (ENABLE_VLC "Build vlc, the videoplayer plugin" ${WITH_PLUGINS})
 option (ENABLE_VROOBY "Build Vrooby, removable storage devices manager" ${WITH_PLUGINS})
 option (ENABLE_XPROXY "Build XProxy, the advanced proxy manager" ${WITH_PLUGINS})
 option (ENABLE_XTAZY "Build Xtazy, plugin for keeping track of a currently playing song" ${WITH_PLUGINS})
@@ -225,7 +226,6 @@ option (ENABLE_SNAILS "Build Snails, LeechCraft mail client" OFF)
 option (ENABLE_TWIFEE "Build Twifee, the Twitter client" OFF)
 option (ENABLE_CEMENTO "Build Cemento, LeechCraft common persistent storage" OFF)
 option (ENABLE_WOODPECKER "Build Woodpecker, twitter client" ${WITH_PLUGINS})
-option (ENABLE_VLC "Build vlc, plugin for video" OFF)
 
 # Dumb alternatives
 option (ENABLE_DUMBEEP "Build Dumbeep, a dumb sound notifier for those fearing true LMP power" OFF)
diff --git a/src/plugins/vlc/CMakeLists.txt b/src/plugins/vlc/CMakeLists.txt
index 0fc6050..41325ca 100644
--- a/src/plugins/vlc/CMakeLists.txt
+++ b/src/plugins/vlc/CMakeLists.txt
@@ -15,11 +15,13 @@ include_directories (
 	)
 set (SRCS
 	vlc.cpp
+	playlistwidget.cpp
 	vlcwidget.cpp
 	vlcplayer.cpp
 	vlcscrollbar.cpp
 	signalledwidget.cpp
 	soundwidget.cpp
+	playlistmodel.cpp
 	)
 	
 #CreateTrs("vlc" "en;ru_RU" COMPILED_TRANSLATIONS)
diff --git a/src/plugins/vlc/playlistmodel.cpp b/src/plugins/vlc/playlistmodel.cpp
new file mode 100644
index 0000000..bcd8a73
--- /dev/null
+++ b/src/plugins/vlc/playlistmodel.cpp
@@ -0,0 +1,201 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#include "playlistmodel.h"
+#include <QModelIndex>
+#include <QVariant>
+#include <QTime>
+#include <QTimer>
+#include <QMimeData>
+#include <QDebug>
+#include <QItemSelectionModel>
+#include <QUrl>
+#include <vlc/vlc.h>
+#include "playlistwidget.h"
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	PlaylistModel::PlaylistModel (PlaylistWidget *parent, libvlc_media_list_t *playlist)
+	: QStandardItemModel (parent)
+	, Parent_ (parent)
+	, Playlist_ (playlist)
+	{
+		setColumnCount (2);
+		setHorizontalHeaderLabels ({ tr ("Name"), tr ("Duration") });
+		setSupportedDragActions (Qt::MoveAction | Qt::CopyAction);
+	}
+	
+	PlaylistModel::~PlaylistModel ()
+	{
+		const int size = Items_ [0].size ();
+		for (int i = 0; i < size; i++)
+			libvlc_media_release (libvlc_media_list_item_at_index (Playlist_, i));
+		
+		setRowCount (0);
+	}
+	
+	void PlaylistModel::updateTable ()
+	{
+		setRowCount (libvlc_media_list_count (Playlist_));
+		if (libvlc_media_list_count (Playlist_) != Items_ [0].size ())
+		{
+			int cnt = Items_ [0].size ();
+			Items_ [0].resize (libvlc_media_list_count (Playlist_));
+			Items_ [1].resize (libvlc_media_list_count (Playlist_));
+			
+			for (int i = cnt; i < Items_ [0].size (); i++)
+			{
+				Items_ [0] [i] = new QStandardItem;
+				Items_ [0] [i]->setFlags (Qt::ItemIsDragEnabled | Qt::ItemIsDropEnabled);
+				Items_ [1] [i] = new QStandardItem;
+				Items_ [1] [i]->setFlags (Qt::ItemIsDragEnabled | Qt::ItemIsDropEnabled);
+			}
+		}
+		
+		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
+		{
+			libvlc_media_t *media = libvlc_media_list_item_at_index (Playlist_, i);
+			Items_ [0] [i]->setText (QString::fromUtf8 (libvlc_media_get_meta (media, libvlc_meta_Title)));
+			
+			if (!libvlc_media_is_parsed (media))
+				libvlc_media_parse (media);
+				
+			QTime time (0, 0);
+			time = time.addMSecs (libvlc_media_get_duration (media));
+			Items_ [1] [i]->setText (time.toString ("hh:mm:ss"));
+		}
+		
+		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
+		{
+			setItem (i, 0, Items_ [0] [i]);
+			setItem (i, 1, Items_ [1] [i]);
+		}
+	}
+	
+	bool PlaylistModel::dropMimeData (const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex& parent)
+	{
+		const QList <QUrl>& urls = data->urls ();
+		if (parent != invisibleRootItem ()->index ())
+			row = parent.row () - 1;
+		else	
+			row -= 2;
+		
+		
+		if (data->colorData ().toString () == "vtyulb")
+		{	
+			QUrl insertAfter;
+			for (int i = row; i > 0; i--)
+				if (!urls.contains (QUrl (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL))))
+				{
+					insertAfter = QUrl (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL));
+					break;
+				}
+			
+			QList<libvlc_media_t*> mediaList;
+			for (int i = 0; i < urls.size (); i++)
+				mediaList << FindAndDelete (urls [i]);
+			
+			int after;
+			if (insertAfter.isEmpty ())
+				after = -1;
+			else
+				for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
+					if (QUrl (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL)) == insertAfter)
+					{
+						after = i;
+						break;
+					}
+					
+			if (!parent.isValid () && (after == -1))  // VLC forever
+				for (int i = 0; i < urls.size (); i++)
+					libvlc_media_list_add_media (Playlist_, mediaList [i]);
+			else
+				for (int i = 0; i < urls.size (); i++)
+					libvlc_media_list_insert_media (Playlist_, mediaList [i], after + i + 2);
+			
+			updateTable ();
+		}
+		else
+			for (int i = 0; i < urls.size (); i++)
+				AddUrl (urls [i]);
+		
+		return true;
+	}
+	
+	QStringList PlaylistModel::mimeTypes () const
+	{
+		return QStringList ("text/uri-list");
+	}
+	
+	QMimeData* PlaylistModel::mimeData (const QModelIndexList& indexes) const
+	{
+		if (libvlc_media_list_count (Playlist_) == 1)
+			return nullptr;
+		
+		QMimeData *result = new QMimeData;
+		QList<QUrl> urls;
+		for (int i = 0; i < indexes.size (); i++)
+			if (indexes [i].column () == 0)
+				urls << QUrl (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, indexes[i].row ()), libvlc_meta_URL));
+		
+		result->setUrls (urls);
+		result->setColorData (QVariant ("vtyulb"));
+		return result;
+	}
+	
+	Qt::DropActions PlaylistModel::supportedDropActions () const
+	{
+		return Qt::MoveAction | Qt::CopyAction;
+	}
+		
+	libvlc_media_t* PlaylistModel::FindAndDelete (QUrl url)
+	{
+		libvlc_media_t *res = nullptr;
+		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
+			if (QUrl (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL)) == url)
+			{
+				res = libvlc_media_list_item_at_index (Playlist_, i);
+				libvlc_media_list_remove_index (Playlist_, i);
+				break;
+			}
+			
+		if (!res)
+			qWarning () << Q_FUNC_INFO << "fatal";
+		
+		return res;
+	}
+	
+	void PlaylistModel::AddUrl (const QUrl& url)
+	{
+		Parent_->AddUrl (url);
+	}
+}
+}
diff --git a/src/plugins/vlc/playlistmodel.h b/src/plugins/vlc/playlistmodel.h
new file mode 100644
index 0000000..d0e9c31
--- /dev/null
+++ b/src/plugins/vlc/playlistmodel.h
@@ -0,0 +1,72 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#pragma once
+
+#include <QStandardItemModel>
+#include <QVector>
+
+struct libvlc_media_list_t;
+struct libvlc_media_t;
+
+class QMimeData;
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	class PlaylistWidget;
+	
+	class PlaylistModel : public QStandardItemModel
+	{
+		Q_OBJECT
+		
+		libvlc_media_list_t *Playlist_;
+		QVector<QStandardItem*> Items_ [2];
+		PlaylistWidget *Parent_;
+	
+	public:
+		explicit PlaylistModel (PlaylistWidget *parent, libvlc_media_list_t *playlist);
+		~PlaylistModel ();
+		
+		bool dropMimeData (const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex& parent);
+		QStringList mimeTypes () const;
+		QMimeData* mimeData (const QModelIndexList&) const;
+		Qt::DropActions supportedDropActions () const;
+		
+		void AddUrl (const QUrl&);
+		
+	private:
+		libvlc_media_t* FindAndDelete (QUrl);
+		
+	public slots:
+		void updateTable ();
+	};
+}
+}
diff --git a/src/plugins/vlc/playlistwidget.cpp b/src/plugins/vlc/playlistwidget.cpp
new file mode 100644
index 0000000..f91e0a1
--- /dev/null
+++ b/src/plugins/vlc/playlistwidget.cpp
@@ -0,0 +1,201 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANusers/vtyulb/TY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#include "playlistwidget.h"
+#include <QDragEnterEvent>
+#include <QDropEvent>
+#include <QVBoxLayout>
+#include <QTimer>
+#include <QString>
+#include <QRect>
+#include <QModelIndex>
+#include <QAction>
+#include <QMenu>
+#include <QPaintEvent>
+#include <QPainter>
+#include <QDebug>
+#include <QFontMetrics>
+#include <vlc/vlc.h>
+#include "playlistmodel.h"
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	PlaylistWidget::PlaylistWidget (QWidget *parent)
+	: QTreeView (parent)
+	{
+		setDragEnabled (true);
+		setDropIndicatorShown (true);
+		setAcceptDrops (true);
+		setBaseSize (0, 0);
+		setRootIsDecorated (false);
+	}
+	
+	PlaylistWidget::~PlaylistWidget ()
+	{
+		libvlc_media_list_release (Playlist_);
+		libvlc_media_list_player_release (Player_);
+		delete DeleteAction_;
+	}
+	
+	void PlaylistWidget::Init (libvlc_instance_t *instance, libvlc_media_player_t *player)
+	{
+		Player_ = libvlc_media_list_player_new (instance);
+		Instance_ = instance;
+		libvlc_media_list_player_set_media_player (Player_, player);
+		Playlist_ = libvlc_media_list_new (Instance_);
+		libvlc_media_list_player_set_media_list (Player_, Playlist_);
+		NativePlayer_ = player;
+		
+		Model_ = new PlaylistModel (this, Playlist_);
+		setModel (Model_);
+		
+		QTimer *timer = new QTimer (this);
+		timer->setInterval (1000);
+		connect (timer,
+				SIGNAL (timeout ()),
+				this,
+				SLOT (updateInterface ()));
+		
+		timer->start ();
+
+		DeleteAction_ = new QAction (this);
+	}
+	
+	void PlaylistWidget::AddUrl (const QUrl& url)
+	{
+		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
+			if (url.toEncoded () == libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_URL))
+			{
+				qWarning () << Q_FUNC_INFO << "Ignoring already added url";
+				return;
+			}
+		libvlc_media_t *m = libvlc_media_new_path (Instance_, url.toEncoded ());
+		libvlc_media_set_meta (m, libvlc_meta_URL, url.toEncoded ());
+		libvlc_media_list_add_media (Playlist_, m);
+		libvlc_media_list_player_play (Player_);
+		
+		updateInterface ();
+	}
+	
+	bool PlaylistWidget::IsPlaying () const
+	{
+		return libvlc_media_list_player_is_playing (Player_);
+	}
+	
+	void PlaylistWidget::togglePlay ()
+	{
+		if (IsPlaying ())
+			libvlc_media_list_player_pause (Player_);
+		else
+			libvlc_media_list_player_play (Player_);
+	}
+	
+	void PlaylistWidget::Clear ()
+	{
+		libvlc_media_list_player_stop (Player_);
+		while (libvlc_media_list_count (Playlist_))
+			libvlc_media_list_remove_index (Playlist_, 0);
+	}
+	
+	void PlaylistWidget::updateInterface ()
+	{
+		Model_->updateTable ();
+		int currentRow = libvlc_media_list_index_of_item (Playlist_, libvlc_media_player_get_media (NativePlayer_));
+		for (int i = 0; i < Model_->rowCount (); i++)
+			if (i != currentRow)
+				for (int j = 0; j < 2; j++)
+					selectionModel ()->select (Model_->indexFromItem (Model_->item (i, j)),
+														QItemSelectionModel::Deselect);
+				
+		for (int i = 0; i < 2; i++)
+			selectionModel ()->select (Model_->indexFromItem (Model_->item (currentRow, i)),
+										QItemSelectionModel::Select);
+		
+		update ();
+	}
+	
+	void PlaylistWidget::createMenu (QPoint p)
+	{
+		int index = indexAt (p).row ();
+		if (index == -1)
+			return;
+		
+		QMenu menu;
+		QAction *action = new QAction (&menu);
+		action->setText ("Delete");
+		action->setData (QVariant (index));
+		menu.addAction (action);
+
+		connect (&menu,
+				SIGNAL (triggered (QAction*)),
+				this,
+				SLOT (deleteRequested (QAction*)));
+
+		menu.exec (QCursor::pos ());
+	}
+	
+	void PlaylistWidget::deleteRequested (QAction *object)
+	{
+		libvlc_media_t *media = libvlc_media_list_item_at_index (Playlist_, object->data ().toInt ());
+		libvlc_media_list_remove_index (Playlist_, object->data ().toInt ());
+		libvlc_media_release (media);
+		Model_->updateTable ();
+	}
+	
+	void PlaylistWidget::mouseDoubleClickEvent (QMouseEvent *event)
+	{
+		int row = indexAt (event->pos ()).row ();
+		if (row > -1 && row < libvlc_media_list_count (Playlist_))
+			libvlc_media_list_player_play_item_at_index (Player_, row);
+		
+		event->accept ();
+	}
+	
+	void PlaylistWidget::mousePressEvent (QMouseEvent *event)
+	{
+		if (event->button () == Qt::RightButton) 
+		{
+			createMenu (event->pos ()); //customContextMenu would not call. I don't know why
+			event->accept ();
+		}
+		
+		QTimer::singleShot (50, Model_, SLOT (updateTable ()));
+	}
+	
+	void PlaylistWidget::resizeEvent (QResizeEvent *event)
+	{
+		QFontMetrics metrics (font ());
+		int len =  (metrics.width ("00:00:00")) + 10;
+		setColumnWidth (0, event->size ().width () - len);
+		setColumnWidth (1, len);
+	}
+}
+}
diff --git a/src/plugins/vlc/playlistwidget.h b/src/plugins/vlc/playlistwidget.h
new file mode 100644
index 0000000..a69874f
--- /dev/null
+++ b/src/plugins/vlc/playlistwidget.h
@@ -0,0 +1,83 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2013  Vladislav Tyulbashev
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ *
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ *
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ **********************************************************************/
+
+#pragma once
+
+#include <QWidget>
+#include <QUrl>
+#include <QTreeView>
+
+struct libvlc_media_player_t;
+struct libvlc_media_list_player_t;
+struct libvlc_instance_t;
+struct libvlc_media_list_t;
+struct libvlc_media_t;
+
+class QAction;
+
+namespace LeechCraft
+{
+namespace vlc
+{
+	class PlaylistModel;
+	
+	class PlaylistWidget : public QTreeView
+	{
+		Q_OBJECT
+		
+		libvlc_media_list_player_t *Player_;
+		libvlc_media_list_t *Playlist_;
+		libvlc_media_player_t *NativePlayer_;
+		libvlc_instance_t *Instance_;
+		
+		PlaylistModel *Model_;
+		QAction *DeleteAction_;
+	
+	public:
+		explicit PlaylistWidget (QWidget *parent = 0);
+		~PlaylistWidget ();
+		
+		void AddUrl (const QUrl&);
+		bool IsPlaying () const;
+		void Init (libvlc_instance_t *instance, libvlc_media_player_t *player);
+		void Clear ();
+		
+	protected:
+		void mouseDoubleClickEvent (QMouseEvent*);
+		void mousePressEvent (QMouseEvent*);
+		void resizeEvent (QResizeEvent*);
+		
+	private slots:
+		void togglePlay ();
+		void updateInterface ();
+		void createMenu (QPoint);
+		void deleteRequested (QAction*);
+	};
+}
+}
diff --git a/src/plugins/vlc/signalledwidget.cpp b/src/plugins/vlc/signalledwidget.cpp
index a2db8e2..ec0cda9 100644
--- a/src/plugins/vlc/signalledwidget.cpp
+++ b/src/plugins/vlc/signalledwidget.cpp
@@ -107,8 +107,18 @@ namespace vlc
 	}
 	
 	void SignalledWidget::showEvent (QShowEvent *event)
-	{	
+	{
 		emit shown (event);
 	}
+	
+	void SignalledWidget::dragEnterEvent (QDragEnterEvent *event)
+	{
+		emit dragEntered (event);
+	}
+
+	void SignalledWidget::dropEvent (QDropEvent *event)
+	{
+		emit dropped (event);
+	}
 }
 }
diff --git a/src/plugins/vlc/signalledwidget.h b/src/plugins/vlc/signalledwidget.h
index 27d28b0..0c72cc8 100644
--- a/src/plugins/vlc/signalledwidget.h
+++ b/src/plugins/vlc/signalledwidget.h
@@ -58,6 +58,8 @@ namespace vlc
 		void paintEvent (QPaintEvent*);
 		void resizeEvent (QResizeEvent*);
 		void showEvent (QShowEvent*);
+		void dragEnterEvent (QDragEnterEvent*);
+		void dropEvent (QDropEvent*);
 		
 	signals:
 		void mousePress (QMouseEvent*);
@@ -67,6 +69,8 @@ namespace vlc
 		void keyPress (QKeyEvent*);
 		void resized (QResizeEvent*);
 		void shown (QShowEvent*);
+		void dragEntered (QDragEnterEvent*);
+		void dropped (QDropEvent*);
 	};
 }
 }
diff --git a/src/plugins/vlc/vlc.cpp b/src/plugins/vlc/vlc.cpp
index e12a951..0e8843c 100644
--- a/src/plugins/vlc/vlc.cpp
+++ b/src/plugins/vlc/vlc.cpp
@@ -77,6 +77,36 @@ namespace vlc
 									ActionInfo (tr ("Key for switch play/pause"),
 									QKeySequence (Qt::Key_Space),
 									Proxy_->GetIcon ("media-playback-start")));
+		
+		Manager_->RegisterActionInfo ("org.vlc.volume_increase",
+									ActionInfo (tr ("Key for increasing volume"),
+									QKeySequence (Qt::Key_Plus),
+									Proxy_->GetIcon ("audio-volume-high")));
+		
+		Manager_->RegisterActionInfo ("org.vlc.volume_decrease",
+									ActionInfo (tr ("Key for decreasing volume"),
+									QKeySequence (Qt::Key_Minus),
+									Proxy_->GetIcon ("audio-volume-low")));
+		
+		Manager_->RegisterActionInfo ("org.vlc.plus_3_percent",
+									ActionInfo (tr ("Key for +3 percent"),
+									QKeySequence (Qt::Key_Asterisk),
+									QIcon ()));
+		
+		Manager_->RegisterActionInfo ("org.vlc.minus_3_percent",
+									ActionInfo (tr ("Key for -3 percent"),
+									QKeySequence (Qt::Key_Slash),
+									QIcon ()));
+		
+		Manager_->RegisterActionInfo ("org.vlc.plus_10_seconds",
+									ActionInfo (tr ("Key for +10 seconds"),
+									QKeySequence (Qt::Key_0),
+									QIcon ()));
+
+		Manager_->RegisterActionInfo ("org.vlc.minus_10_seconds",
+									ActionInfo (tr ("Key for -10 seconds"),
+									QKeySequence (Qt::Key_9),
+									QIcon ()));
 	}
 
 	void Plugin::SecondInit ()
@@ -90,6 +120,8 @@ namespace vlc
 
 	void Plugin::Release ()
 	{
+		for (int i = 0; i < Tabs_.size (); i++)
+			delete Tabs_ [i];
 	}
 
 	QString Plugin::GetName () const
@@ -110,6 +142,7 @@ namespace vlc
 	void Plugin::TabOpenRequested (const QByteArray& tabClass) 
 	{
 		VlcWidget *widget = new VlcWidget (Manager_);
+		Tabs_.push_back (widget);
 		emit addNewTab ("VLC", widget);
 		emit raiseTab (widget);
 		connect (widget, 
diff --git a/src/plugins/vlc/vlc.h b/src/plugins/vlc/vlc.h
index 9e8884c..265ab88 100644
--- a/src/plugins/vlc/vlc.h
+++ b/src/plugins/vlc/vlc.h
@@ -50,6 +50,7 @@ namespace vlc
 	
 		ICoreProxy_ptr Proxy_;
 		Util::ShortcutManager *Manager_;
+		QVector<VlcWidget*> Tabs_;
 	
 	public:
 		void Init (ICoreProxy_ptr);
diff --git a/src/plugins/vlc/vlcplayer.cpp b/src/plugins/vlc/vlcplayer.cpp
index 295cfef..f008fe7 100644
--- a/src/plugins/vlc/vlcplayer.cpp
+++ b/src/plugins/vlc/vlcplayer.cpp
@@ -37,6 +37,7 @@
 #include <QSizePolicy>
 #include <QEventLoop>
 #include <QTimeLine>
+#include <QDir>
 #include <QDebug>
 #include "vlcplayer.h"
 
@@ -70,7 +71,11 @@ namespace vlc
 	{
 		const char * const vlc_args[] = 
 		{
-			"--ffmpeg-hw"
+			"--ffmpeg-hw",
+			//"--extraintf=logger",
+			//"--verbose=2",
+			"--logfile",
+			(QDir::homePath () + ".leechcraft/vlc-log.txt").toUtf8 ()
 		};
 
 		VlcInstance_ = std::shared_ptr<libvlc_instance_t> (libvlc_new (sizeof (vlc_args) / sizeof (vlc_args [0]), vlc_args), libvlc_release);
@@ -78,6 +83,12 @@ namespace vlc
 		libvlc_media_player_set_xwindow (Mp_.get (), parent->winId ());
 	}
 	
+	void VlcPlayer::Init (QWidget *parent)
+	{
+		libvlc_media_player_set_xwindow (Mp_.get (), parent->winId ());
+		Parent_ = parent;
+	}
+	
 	void VlcPlayer::setUrl (const QUrl& url) 
 	{
 		Subtitles_.clear ();
@@ -88,14 +99,13 @@ namespace vlc
 		
 		libvlc_media_player_set_media (Mp_.get (), M_.get ());
 		libvlc_media_player_play (Mp_.get ());
-		
-		LastMedia_ = url;
 	}
 	
 	void VlcPlayer::addUrl (const QUrl& url)
 	{
+		QUrl lastMedia = QUrl::fromEncoded (libvlc_media_get_meta (libvlc_media_player_get_media (Mp_.get ()), libvlc_meta_URL));
 		Freeze ();
-		M_.reset (libvlc_media_new_location (VlcInstance_.get (), LastMedia_.toEncoded ()), libvlc_media_release);
+		M_.reset (libvlc_media_new_location (VlcInstance_.get (), lastMedia.toEncoded ()), libvlc_media_release);
 		libvlc_media_add_option (M_.get (), ":input-slave=" + url.toEncoded ());
 		libvlc_media_player_set_media (Mp_.get (), M_.get ());
 		UnFreeze ();		
@@ -156,6 +166,7 @@ namespace vlc
 	
 	void VlcPlayer::Freeze ()
 	{
+		emit unstable ();
 		FreezePlayingMedia_ = libvlc_media_player_get_media (Mp_.get ());
 		if (FreezePlayingMedia_) 
 		{
@@ -199,6 +210,7 @@ namespace vlc
 			libvlc_media_player_pause (Mp_.get ());
 		
 		ReloadSubtitles ();
+		emit stable ();
 	}
 	
 	void VlcPlayer::ReloadSubtitles ()
@@ -250,9 +262,8 @@ namespace vlc
 		return libvlc_video_get_spu_count (Mp_.get ());
 	}
 	
-	void VlcPlayer::AddSubtitles (const QString &file)
+	void VlcPlayer::AddSubtitles (const QString& file)
 	{
-		qWarning () << Q_FUNC_INFO << file;
 		libvlc_video_set_subtitle_file (Mp_.get (), file.toUtf8 ());
 		Subtitles_ << file;
 	}
@@ -342,10 +353,36 @@ namespace vlc
 			if (line.currentTime () > MAX_TIMEOUT)
 			{
 				qWarning () << Q_FUNC_INFO << "timeout";
+				break;
 			}
 		}
 		
 		WaitForPlaying ();
 	}
+	
+	libvlc_instance_t* VlcPlayer::GetInstance () const
+	{
+		return VlcInstance_.get ();
+	}
+	
+	void VlcPlayer::plus3percent ()
+	{
+		libvlc_media_player_set_time (Mp_.get (), libvlc_media_player_get_time (Mp_.get ()) + libvlc_media_player_get_length (Mp_.get ()) * 0.03);
+	}
+	
+	void VlcPlayer::minus3percent ()
+	{
+		libvlc_media_player_set_time (Mp_.get (), libvlc_media_player_get_time (Mp_.get ()) - libvlc_media_player_get_length (Mp_.get ()) * 0.03);
+	}
+
+	void VlcPlayer::plus10seconds ()
+	{
+		libvlc_media_player_set_time (Mp_.get (), libvlc_media_player_get_time (Mp_.get ()) + 10 * 1000);
+	}
+	
+	void VlcPlayer::minus10seconds ()
+	{
+		libvlc_media_player_set_time (Mp_.get (), libvlc_media_player_get_time (Mp_.get ()) - 10 * 1000);
+	}
 }
 }
diff --git a/src/plugins/vlc/vlcplayer.h b/src/plugins/vlc/vlcplayer.h
index 0f1b722..ae8a186 100644
--- a/src/plugins/vlc/vlcplayer.h
+++ b/src/plugins/vlc/vlcplayer.h
@@ -34,6 +34,7 @@
 #include <QUrl>
 #include <QStringList>
 #include <vlc/vlc.h>
+#include <boost/graph/graph_concepts.hpp>
 
 class QWidget;
 class QTime;
@@ -58,7 +59,6 @@ namespace vlc
 		QWidget *Parent_;
 		bool DVD_;
 		
-		QUrl LastMedia_;
 		QStringList Subtitles_;
 		
 		libvlc_time_t FreezeCur_;
@@ -76,6 +76,8 @@ namespace vlc
 		double GetPosition () const;
 		QWidget* GetParent () const;
 		
+		void Init (QWidget *parent);
+		
 		int GetAudioTracksNumber () const;
 		int GetCurrentAudioTrack () const;
 		QString GetAudioTrackDescription (int) const;
@@ -89,6 +91,7 @@ namespace vlc
 		void DVDNavigate (unsigned);
 		
 		std::shared_ptr<libvlc_media_player_t> GetPlayer () const;
+		libvlc_instance_t* GetInstance () const;
 		
 		QTime GetCurrentTime () const;
 		QTime GetFullTime () const;
@@ -117,6 +120,15 @@ namespace vlc
 		void dvdNavigateUp ();
 		void dvdNavigateDown ();
 		void dvdNavigateEnter ();
+		
+		void minus10seconds ();
+		void plus10seconds ();
+		void plus3percent ();
+		void minus3percent ();
+		
+	signals:
+		void unstable ();
+		void stable ();
 	};
 }
 }
diff --git a/src/plugins/vlc/vlcscrollbar.cpp b/src/plugins/vlc/vlcscrollbar.cpp
index 72259d4..918b51b 100644
--- a/src/plugins/vlc/vlcscrollbar.cpp
+++ b/src/plugins/vlc/vlcscrollbar.cpp
@@ -41,6 +41,7 @@ namespace vlc
 	VlcScrollBar::VlcScrollBar (QWidget *parent)
 	: QWidget (parent)
 	, CurrentPosition_ (0)
+	, blocked (false)
 	{
 	}
 
@@ -73,7 +74,18 @@ namespace vlc
 	
 	void VlcScrollBar::setPosition (double pos)
 	{
-		CurrentPosition_ = pos;
+		if (!blocked)
+			CurrentPosition_ = pos;
+	}
+	
+	void VlcScrollBar::blockUpdating ()
+	{
+		blocked = true;
+	}
+	
+	void VlcScrollBar::unBlockUpdating ()
+	{
+		blocked = false;
 	}
 }
 }
diff --git a/src/plugins/vlc/vlcscrollbar.h b/src/plugins/vlc/vlcscrollbar.h
index 2c612ec..8c3798a 100644
--- a/src/plugins/vlc/vlcscrollbar.h
+++ b/src/plugins/vlc/vlcscrollbar.h
@@ -43,6 +43,7 @@ namespace vlc
 		
 		double CurrentPosition_;
 		QPoint LastMousePoint_;
+		bool blocked;
 		
 	public:
 		explicit VlcScrollBar (QWidget *parent = 0);
@@ -54,6 +55,9 @@ namespace vlc
 
 	public slots:	
 		void setPosition (double);
+		void blockUpdating ();
+		void unBlockUpdating ();
+		
 	signals:
 		void changePosition (double);
 	};
diff --git a/src/plugins/vlc/vlcwidget.cpp b/src/plugins/vlc/vlcwidget.cpp
index ca1e29a..f564112 100644
--- a/src/plugins/vlc/vlcwidget.cpp
+++ b/src/plugins/vlc/vlcwidget.cpp
@@ -38,6 +38,7 @@
 #include <QKeyEvent>
 #include <QTimer>
 #include <QTime>
+#include <QSplitter>
 #include <QToolBar>
 #include <QMenu>
 #include <QSizePolicy>
@@ -52,6 +53,8 @@
 #include <QResizeEvent>
 #include <QCursor>
 #include <QDropEvent>
+#include <QCoreApplication>
+#include <QSettings>
 #include <util/shortcuts/shortcutmanager.h>
 #include "vlcwidget.h"
 #include "vlcplayer.h"
@@ -62,6 +65,9 @@ namespace
 	{
 		return (a - b).manhattanLength ();
 	}
+	
+	const QStringList KNOWN_AUDIO_FILE_FORMATS = {".ac3", ".mp3", ".ogg"};
+	const QStringList KNOWN_SUBTITLES_FILE_FORMATS = {".srt", ".smi", ".ssa", ".ass"};
 }
 
 namespace LeechCraft
@@ -80,12 +86,28 @@ namespace vlc
 	{
 		VlcMainWidget_ = new SignalledWidget;
 		VlcMainWidget_->SetBackGroundColor (new QColor ("black"));
+		PlaylistWidget_ = new PlaylistWidget;
+		
+		MainArea_ = new QSplitter (this);
+		MainArea_->addWidget (VlcMainWidget_);
+		MainArea_->addWidget (PlaylistWidget_);
+		
 		QVBoxLayout *layout = new QVBoxLayout;
-		layout->setContentsMargins (0, 0, 0, 0);
-		layout->addWidget (VlcMainWidget_);
+		layout->addWidget(MainArea_);
 		setLayout (layout);
+		
 		VlcPlayer_ = new VlcPlayer (VlcMainWidget_);
-
+		QSizePolicy pol (QSizePolicy::Expanding, QSizePolicy::Expanding);
+		pol.setHorizontalStretch (255);
+		pol.setVerticalStretch (255);
+		VlcMainWidget_->setSizePolicy (pol);
+		
+		PlaylistWidget_->Init (VlcPlayer_->GetInstance (), VlcPlayer_->GetPlayer ().get ());
+		VlcPlayer_->Init (VlcMainWidget_);
+		
+		DisableScreenSaver_ = new QTimer (this);
+		DisableScreenSaver_->setInterval (9000);
+		
 		GenerateToolBar ();
 		PrepareFullScreen ();
 		InterfaceUpdater_ = new QTimer (this);
@@ -126,7 +148,7 @@ namespace vlc
 		
 		connect (TogglePlay_,
 				SIGNAL (triggered ()),
-				VlcPlayer_,
+				PlaylistWidget_,
 				SLOT(togglePlay ()));
 		
 		connect (Stop_,
@@ -139,17 +161,47 @@ namespace vlc
 				this,
 				SLOT (toggleFullScreen ()));
 		
+		connect (VlcPlayer_,
+				SIGNAL (stable ()),
+				ScrollBar_,
+				SLOT (unBlockUpdating ()));
+		
+		connect (VlcPlayer_,
+				SIGNAL (unstable ()),
+				ScrollBar_,
+				SLOT (blockUpdating ()));
+		
+		connect (DisableScreenSaver_,
+				SIGNAL (timeout ()),
+				this,
+				SLOT (disableScreenSaver ()));
+		
 		InitNavigations ();
+		InitVolumeActions ();
+		InitRewindActions ();
 		setAcceptDrops (true);
+		RestoreSettings ();
 	}
 	
-	VlcWidget::~VlcWidget()
+	VlcWidget::~VlcWidget ()
 	{
 		VlcPlayer_->stop ();
 		delete VlcPlayer_;
+		SaveSettings ();
 		emit deleteMe (this);
 	}
+	
+	void VlcWidget::RestoreSettings ()
+	{
+		Settings_ = new QSettings (QCoreApplication::organizationName (), QCoreApplication::applicationName () + "_Vlc");
+		MainArea_->restoreState (Settings_->value ("PlaylistGeometry").toByteArray ());
+	}
 
+	void VlcWidget::SaveSettings ()
+	{
+		Settings_->setValue ("PlaylistGeometry", QVariant (MainArea_->saveState ()));
+		delete Settings_;
+	}
 
 	QObject* VlcWidget::ParentMultiTabs ()
 	{
@@ -171,8 +223,12 @@ namespace vlc
 		QString file = QFileDialog::getOpenFileName (this,
 													tr ("Open file"),
 													tr ("Videos (*.mkv *.avi *.mov *.mpg)"));
+		
 		if (QFile::exists (file))
-			VlcPlayer_->setUrl (QUrl::fromLocalFile (file));
+		{
+			PlaylistWidget_->Clear ();
+			PlaylistWidget_->AddUrl (QUrl::fromLocalFile (file));
+		}
 	}
 	
 	void VlcWidget::addFolder () 
@@ -182,7 +238,10 @@ namespace vlc
 													tr ("Folder with video"));
 		
 		if (QFile::exists (folder))
-			VlcPlayer_->setUrl (QUrl ("directory://" + folder));
+		{
+			PlaylistWidget_->Clear ();
+			PlaylistWidget_->AddUrl (QUrl ("directory://" + folder));
+		}
 	}
 	
 	void VlcWidget::addSimpleDVD ()
@@ -191,8 +250,11 @@ namespace vlc
 													tr ("Open DVD"),
 													tr ("Root of DVD directory"));
 		
-		if (QFile::exists (folder)) 
-			VlcPlayer_->setUrl (QUrl ("dvdsimple://" + folder));
+		if (QFile::exists (folder))
+		{
+			PlaylistWidget_->Clear ();
+			PlaylistWidget_->AddUrl (QUrl ("dvdsimple://" + folder));
+		}
 	}
 	
 	void VlcWidget::addDVD ()
@@ -202,7 +264,10 @@ namespace vlc
 													tr ("Root of DVD directory"));
 		
 		if (QFile::exists (folder))
-			VlcPlayer_->setUrl (QUrl ("dvd://" + folder));
+		{
+			PlaylistWidget_->Clear ();
+			PlaylistWidget_->AddUrl (QUrl ("dvd://" + folder));
+		}
 	}
 
 	void VlcWidget::addUrl ()
@@ -210,7 +275,10 @@ namespace vlc
 		QString url = QInputDialog::getText (this, tr ("Open URL"), tr ("Enter URL"));
 		
 		if (!url.isEmpty ())
-			VlcPlayer_->setUrl (QUrl (url));
+		{
+			PlaylistWidget_->Clear ();
+			PlaylistWidget_->AddUrl (QUrl (url));
+		}
 	}
 	
 	void VlcWidget::addSlave ()
@@ -408,11 +476,13 @@ namespace vlc
 	void VlcWidget::TabLostCurrent ()
 	{
 		InterfaceUpdater_->stop ();
+		DisableScreenSaver_->stop ();
 	}
 	
 	void VlcWidget::TabMadeCurrent ()
 	{
 		InterfaceUpdater_->start ();
+		DisableScreenSaver_->start ();
 	}
 	
 	void VlcWidget::ForbidFullScreen ()
@@ -726,16 +796,87 @@ namespace vlc
 		FullScreenWidget_->addAction (NavigateUp_);
 	}
 	
+	void VlcWidget::InitVolumeActions()
+	{
+		IncreaseVolumeAction_ = new QAction (this);
+		DecreaseVolumeAction_ = new QAction (this);
+		
+		Manager_->RegisterAction ("org.vlc.volume_increase", IncreaseVolumeAction_, true);
+		Manager_->RegisterAction ("org.vlc.volume_decrease", DecreaseVolumeAction_, true);
+		
+		connect (IncreaseVolumeAction_,
+				SIGNAL (triggered ()),
+				SoundWidget_,
+				SLOT (increaseVolume ()));
+		
+		connect (DecreaseVolumeAction_,
+				SIGNAL (triggered ()),
+				SoundWidget_,
+				SLOT (decreaseVolume ()));
+		
+		addAction (IncreaseVolumeAction_);
+		addAction (DecreaseVolumeAction_);
+		
+		FullScreenWidget_->addAction (IncreaseVolumeAction_);
+		FullScreenWidget_->addAction (DecreaseVolumeAction_);
+	}
+	
+	void VlcWidget::InitRewindActions ()
+	{
+		Plus3Percent_ = new QAction (this);
+		Plus10Seconds_ = new QAction (this);
+		Minus3Percent_ = new QAction (this);
+		Minus10Seconds_ = new QAction (this);
+		
+		Manager_->RegisterAction ("org.vlc.plus_3_percent", Plus3Percent_, true);
+		Manager_->RegisterAction ("org.vlc.plus_10_seconds", Plus10Seconds_, true);
+		Manager_->RegisterAction ("org.vlc.minus_3_percent", Minus3Percent_, true);
+		Manager_->RegisterAction ("org.vlc.minus_10_seconds", Minus10Seconds_, true);
+		
+		connect (Plus10Seconds_,
+				SIGNAL (triggered ()),
+				VlcPlayer_,
+				SLOT (plus10seconds ()));
+		
+		connect (Minus10Seconds_,
+				SIGNAL (triggered ()),
+				VlcPlayer_,
+				SLOT (minus10seconds ()));
+		
+		connect (Plus3Percent_,
+				SIGNAL (triggered ()),
+				VlcPlayer_,
+				SLOT (plus3percent ()));
+		
+		connect (Minus3Percent_,
+				SIGNAL (triggered ()),
+				VlcPlayer_,
+				SLOT (minus3percent ()));
+		
+		addAction (Plus10Seconds_);
+		addAction (Plus3Percent_);
+		addAction (Minus10Seconds_);
+		addAction (Minus3Percent_);
+		
+		FullScreenWidget_->addAction (Plus10Seconds_);
+		FullScreenWidget_->addAction (Plus3Percent_);
+		FullScreenWidget_->addAction (Minus10Seconds_);
+		FullScreenWidget_->addAction (Minus3Percent_);
+	}
+	
 	void VlcWidget::dropEvent (QDropEvent *event)
 	{
 		QUrl main = event->mimeData ()->urls () [0];
 		event->accept ();
-		if (main.toString ().right (3) == "ac3")
+		if (KNOWN_AUDIO_FILE_FORMATS.contains(main.toString ().right (4)))
 			VlcPlayer_->addUrl (main);
-		else if (main.toString ().right (3) == "srt")
+		else if (KNOWN_SUBTITLES_FILE_FORMATS.contains(main.toString ().right (4)))
 			VlcPlayer_->AddSubtitles (main.toEncoded ());
 		else
-			VlcPlayer_->setUrl (main);
+		{
+			PlaylistWidget_->Clear ();
+			PlaylistWidget_->AddUrl (main);
+		}
 	}
 	
 	void VlcWidget::dragEnterEvent (QDragEnterEvent *event)
@@ -743,5 +884,10 @@ namespace vlc
 		if (event->mimeData ()->urls ().size () == 1)
 			event->accept ();
 	}
+	
+	void VlcWidget::disableScreenSaver ()
+	{
+		system ("qdbus org.freedesktop.ScreenSaver /ScreenSaver SimulateUserActivity > /dev/null"); //hello kaffeinety
+	}
 }
 }
diff --git a/src/plugins/vlc/vlcwidget.h b/src/plugins/vlc/vlcwidget.h
index addacac..8ecafbb 100644
--- a/src/plugins/vlc/vlcwidget.h
+++ b/src/plugins/vlc/vlcwidget.h
@@ -35,6 +35,7 @@
 #include "vlcscrollbar.h"
 #include "soundwidget.h"
 #include "signalledwidget.h"
+#include "playlistwidget.h"
 
 class QToolBar;
 class QMenu;
@@ -42,6 +43,8 @@ class QLabel;
 class QTimer;
 class QToolButton;
 class QResizeEvent;
+class QSplitter;
+class QSettings;
 
 namespace LeechCraft
 {
@@ -61,13 +64,21 @@ namespace vlc
 		
 		QObject *const Parent_;
 		VlcPlayer *VlcPlayer_;
+		PlaylistWidget *PlaylistWidget_;
 		QToolBar *Bar_;
 		QAction *Open_;
 		QToolButton *OpenButton_;
 		QAction *TogglePlay_;
 		QAction *Stop_;
 		QAction *FullScreenAction_;
+		QAction *IncreaseVolumeAction_;
+		QAction *DecreaseVolumeAction_;
+		QAction *Plus3Percent_;
+		QAction *Minus3Percent_;
+		QAction *Plus10Seconds_;
+		QAction *Minus10Seconds_;
 		QPoint LastMouseEvent_;
+		QSplitter *MainArea_;
 		Util::ShortcutManager * const Manager_;
 		
 		QAction *NavigateLeft_;
@@ -99,6 +110,9 @@ namespace vlc
 		SoundWidget *SoundWidget_;
 		SoundWidget *FullScreenSoundWidget_;
 		QMenu *ContextMenu_;
+		QSettings *Settings_;
+		
+		QTimer *DisableScreenSaver_;
 		
 	public:
 		explicit VlcWidget (Util::ShortcutManager *manager, QWidget *parent = 0);
@@ -118,7 +132,13 @@ namespace vlc
 		void PrepareFullScreen ();
 		void ForbidFullScreen ();
 		void ConnectWidgetToMe (SignalledWidget*);
+		
 		void InitNavigations ();
+		void InitVolumeActions ();
+		void InitRewindActions ();
+		
+		void SaveSettings ();
+		void RestoreSettings ();
 		
 	private slots:
 		void addFile ();
@@ -150,6 +170,8 @@ namespace vlc
 		void AllowPanel ();
 		void ForbidPanel ();
 		
+		void disableScreenSaver ();
+		
 	signals:
 		void deleteMe (QWidget*);
 	};
